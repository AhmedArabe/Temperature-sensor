
temp_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003044  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00003044  000030d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800122  00800122  0000319a  2**0
                  ALLOC
  3 .stab         000034bc  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f2  00000000  00000000  00006658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000794a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009843  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a72e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_1>
       8:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_2>
       c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 14 	call	0x2946	; 0x2946 <main>
      8a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ef       	ldi	r26, 0xF7	; 247
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 18 	jmp	0x300a	; 0x300a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ef       	ldi	r24, 0xF7	; 247
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 18 	jmp	0x300a	; 0x300a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_voidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
   SET_BIT(SREG,SREG_I);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_voidDisable>:


void GIE_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24

}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXIT_voidINT0Init>:
void (*EXIT_INT0PtrFunc) (void)=NULL;
void (*EXIT_INT1PtrFunc) (void)=NULL;
void (*EXIT_INT2PtrFunc) (void)=NULL;

void EXIT_voidINT0Init(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
#if INT0_SENSE == FALLING_EDGE
	/*set sense control for INT0 as falling edge*/
	SET_BIT(MCUCR,MCUCR_ISC01);
     b86:	a5 e5       	ldi	r26, 0x55	; 85
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e5 e5       	ldi	r30, 0x55	; 85
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
     b94:	a5 e5       	ldi	r26, 0x55	; 85
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e5       	ldi	r30, 0x55	; 85
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	8c 93       	st	X, r24

#endif

#if INT0_INITIAL_STATE ==ENABELD
	/*peripheral interrupt enable for INT0*/
	SET_BIT(GICR,GICR_INT0);
     ba2:	ab e5       	ldi	r26, 0x5B	; 91
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	eb e5       	ldi	r30, 0x5B	; 91
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong input of initial state"
#endif

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <EXIT_voidINT1Init>:

void EXIT_voidINT1Init(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62

#if INT1_SENSE == FALLING_EDGE   // falling edge
	/*set sense control for INT1 as falling edge*/
	SET_BIT(MCUCR,MCUCR_ISC11);
     bbe:	a5 e5       	ldi	r26, 0x55	; 85
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e5       	ldi	r30, 0x55	; 85
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 60       	ori	r24, 0x08	; 8
     bca:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8b 7f       	andi	r24, 0xFB	; 251
     bd8:	8c 93       	st	X, r24
#endif


#if INT1_INITIAL_STATE==ENABELD
	/*peripheral interrupt enable for INT1*/
	SET_BIT(GICR,GICR_INT1);
     bda:	ab e5       	ldi	r26, 0x5B	; 91
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e5       	ldi	r30, 0x5B	; 91
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24
#else
#error "Wrong input of initial state"
#endif


}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <EXIT_voidINT2Init>:


void EXIT_voidINT2Init(void)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62


#if INT2_SENSE == FALLING_EDGE   // falling edge
	/*set sense control for INT2 as falling edge*/
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
     bf6:	a4 e5       	ldi	r26, 0x54	; 84
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e5       	ldi	r30, 0x54	; 84
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7b       	andi	r24, 0xBF	; 191
     c02:	8c 93       	st	X, r24
#error "Wrong input of sense control"
#endif

#if INT2_INITIAL_STATE ==ENABELD
	/*peripheral interrupt enable for INT2*/
	SET_BIT(GICR,GICR_INT2);
     c04:	ab e5       	ldi	r26, 0x5B	; 91
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	eb e5       	ldi	r30, 0x5B	; 91
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT2);
#else
#error "Wrong input of initial state"
#endif

}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <EXIT_u8INT0_SetSenseControl>:


u8 EXIT_u8INT0_SetSenseControl(u8 copy_u8sense)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <EXIT_u8INT0_SetSenseControl+0x6>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <EXIT_u8INT0_SetSenseControl+0x8>
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
     c26:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8sense)
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	3c 83       	std	Y+4, r19	; 0x04
     c30:	2b 83       	std	Y+3, r18	; 0x03
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	91 05       	cpc	r25, r1
     c3a:	99 f1       	breq	.+102    	; 0xca2 <EXIT_u8INT0_SetSenseControl+0x8a>
     c3c:	2b 81       	ldd	r18, Y+3	; 0x03
     c3e:	3c 81       	ldd	r19, Y+4	; 0x04
     c40:	23 30       	cpi	r18, 0x03	; 3
     c42:	31 05       	cpc	r19, r1
     c44:	34 f4       	brge	.+12     	; 0xc52 <EXIT_u8INT0_SetSenseControl+0x3a>
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	91 05       	cpc	r25, r1
     c4e:	c1 f1       	breq	.+112    	; 0xcc0 <EXIT_u8INT0_SetSenseControl+0xa8>
     c50:	46 c0       	rjmp	.+140    	; 0xcde <EXIT_u8INT0_SetSenseControl+0xc6>
     c52:	2b 81       	ldd	r18, Y+3	; 0x03
     c54:	3c 81       	ldd	r19, Y+4	; 0x04
     c56:	23 30       	cpi	r18, 0x03	; 3
     c58:	31 05       	cpc	r19, r1
     c5a:	a1 f0       	breq	.+40     	; 0xc84 <EXIT_u8INT0_SetSenseControl+0x6c>
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	84 30       	cpi	r24, 0x04	; 4
     c62:	91 05       	cpc	r25, r1
     c64:	e1 f5       	brne	.+120    	; 0xcde <EXIT_u8INT0_SetSenseControl+0xc6>
	{
	case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
     c66:	a5 e5       	ldi	r26, 0x55	; 85
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e5 e5       	ldi	r30, 0x55	; 85
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	82 60       	ori	r24, 0x02	; 2
     c72:	8c 93       	st	X, r24
     c74:	a5 e5       	ldi	r26, 0x55	; 85
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e5 e5       	ldi	r30, 0x55	; 85
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24
     c82:	2f c0       	rjmp	.+94     	; 0xce2 <EXIT_u8INT0_SetSenseControl+0xca>
	case FALLING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
     c84:	a5 e5       	ldi	r26, 0x55	; 85
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e5 e5       	ldi	r30, 0x55	; 85
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	8c 93       	st	X, r24
     c92:	a5 e5       	ldi	r26, 0x55	; 85
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e5 e5       	ldi	r30, 0x55	; 85
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	8c 93       	st	X, r24
     ca0:	20 c0       	rjmp	.+64     	; 0xce2 <EXIT_u8INT0_SetSenseControl+0xca>
	case ON_CHANGE   :	CLR_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
     ca2:	a5 e5       	ldi	r26, 0x55	; 85
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e5 e5       	ldi	r30, 0x55	; 85
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8d 7f       	andi	r24, 0xFD	; 253
     cae:	8c 93       	st	X, r24
     cb0:	a5 e5       	ldi	r26, 0x55	; 85
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e5 e5       	ldi	r30, 0x55	; 85
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	8c 93       	st	X, r24
     cbe:	11 c0       	rjmp	.+34     	; 0xce2 <EXIT_u8INT0_SetSenseControl+0xca>
	case LOW_LEVEL	 :	CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
     cc0:	a5 e5       	ldi	r26, 0x55	; 85
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e5 e5       	ldi	r30, 0x55	; 85
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	8c 93       	st	X, r24
     cce:	a5 e5       	ldi	r26, 0x55	; 85
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e5 e5       	ldi	r30, 0x55	; 85
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8e 7f       	andi	r24, 0xFE	; 254
     cda:	8c 93       	st	X, r24
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <EXIT_u8INT0_SetSenseControl+0xca>
	default : Local_u8Error_State=NOK;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <EXIT_u8INT1_SetSenseControl>:

u8 EXIT_u8INT1_SetSenseControl(u8 copy_u8sense)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <EXIT_u8INT1_SetSenseControl+0x6>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <EXIT_u8INT1_SetSenseControl+0x8>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
     d00:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8sense)
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	3c 83       	std	Y+4, r19	; 0x04
     d0a:	2b 83       	std	Y+3, r18	; 0x03
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	91 05       	cpc	r25, r1
     d14:	99 f1       	breq	.+102    	; 0xd7c <EXIT_u8INT1_SetSenseControl+0x8a>
     d16:	2b 81       	ldd	r18, Y+3	; 0x03
     d18:	3c 81       	ldd	r19, Y+4	; 0x04
     d1a:	23 30       	cpi	r18, 0x03	; 3
     d1c:	31 05       	cpc	r19, r1
     d1e:	34 f4       	brge	.+12     	; 0xd2c <EXIT_u8INT1_SetSenseControl+0x3a>
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	c1 f1       	breq	.+112    	; 0xd9a <EXIT_u8INT1_SetSenseControl+0xa8>
     d2a:	46 c0       	rjmp	.+140    	; 0xdb8 <EXIT_u8INT1_SetSenseControl+0xc6>
     d2c:	2b 81       	ldd	r18, Y+3	; 0x03
     d2e:	3c 81       	ldd	r19, Y+4	; 0x04
     d30:	23 30       	cpi	r18, 0x03	; 3
     d32:	31 05       	cpc	r19, r1
     d34:	a1 f0       	breq	.+40     	; 0xd5e <EXIT_u8INT1_SetSenseControl+0x6c>
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	91 05       	cpc	r25, r1
     d3e:	e1 f5       	brne	.+120    	; 0xdb8 <EXIT_u8INT1_SetSenseControl+0xc6>
	{
	case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
     d40:	a5 e5       	ldi	r26, 0x55	; 85
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e5 e5       	ldi	r30, 0x55	; 85
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 60       	ori	r24, 0x08	; 8
     d4c:	8c 93       	st	X, r24
     d4e:	a5 e5       	ldi	r26, 0x55	; 85
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e5 e5       	ldi	r30, 0x55	; 85
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	84 60       	ori	r24, 0x04	; 4
     d5a:	8c 93       	st	X, r24
     d5c:	2f c0       	rjmp	.+94     	; 0xdbc <EXIT_u8INT1_SetSenseControl+0xca>
	case FALLING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
     d5e:	a5 e5       	ldi	r26, 0x55	; 85
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e5       	ldi	r30, 0x55	; 85
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	88 60       	ori	r24, 0x08	; 8
     d6a:	8c 93       	st	X, r24
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8b 7f       	andi	r24, 0xFB	; 251
     d78:	8c 93       	st	X, r24
     d7a:	20 c0       	rjmp	.+64     	; 0xdbc <EXIT_u8INT1_SetSenseControl+0xca>
	case ON_CHANGE   :	CLR_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
     d7c:	a5 e5       	ldi	r26, 0x55	; 85
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e5 e5       	ldi	r30, 0x55	; 85
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	87 7f       	andi	r24, 0xF7	; 247
     d88:	8c 93       	st	X, r24
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	84 60       	ori	r24, 0x04	; 4
     d96:	8c 93       	st	X, r24
     d98:	11 c0       	rjmp	.+34     	; 0xdbc <EXIT_u8INT1_SetSenseControl+0xca>
	case LOW_LEVEL	 :	CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
     d9a:	a5 e5       	ldi	r26, 0x55	; 85
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e5 e5       	ldi	r30, 0x55	; 85
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	87 7f       	andi	r24, 0xF7	; 247
     da6:	8c 93       	st	X, r24
     da8:	a5 e5       	ldi	r26, 0x55	; 85
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e5 e5       	ldi	r30, 0x55	; 85
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8b 7f       	andi	r24, 0xFB	; 251
     db4:	8c 93       	st	X, r24
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <EXIT_u8INT1_SetSenseControl+0xca>
	default : Local_u8Error_State=NOK;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <EXIT_u8INT2_SetSenseControl>:


u8 EXIT_u8INT2_SetSenseControl(u8 copy_u8sense)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <EXIT_u8INT2_SetSenseControl+0x6>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <EXIT_u8INT2_SetSenseControl+0x8>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
     dda:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8sense)
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	3c 83       	std	Y+4, r19	; 0x04
     de4:	2b 83       	std	Y+3, r18	; 0x03
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	91 05       	cpc	r25, r1
     dee:	69 f0       	breq	.+26     	; 0xe0a <EXIT_u8INT2_SetSenseControl+0x3e>
     df0:	2b 81       	ldd	r18, Y+3	; 0x03
     df2:	3c 81       	ldd	r19, Y+4	; 0x04
     df4:	24 30       	cpi	r18, 0x04	; 4
     df6:	31 05       	cpc	r19, r1
     df8:	81 f4       	brne	.+32     	; 0xe1a <EXIT_u8INT2_SetSenseControl+0x4e>
	{
	case RISING_EDGE :  SET_BIT(MCUCSR,MCUCSR_ISC2); break;
     dfa:	a4 e5       	ldi	r26, 0x54	; 84
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e4 e5       	ldi	r30, 0x54	; 84
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <EXIT_u8INT2_SetSenseControl+0x52>
	case FALLING_EDGE: 	CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
     e0a:	a4 e5       	ldi	r26, 0x54	; 84
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e4 e5       	ldi	r30, 0x54	; 84
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	8c 93       	st	X, r24
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <EXIT_u8INT2_SetSenseControl+0x52>
	default : Local_u8Error_State=NOK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <EXIT_u8INT_Enable>:

u8 EXIT_u8INT_Enable(u8 copy_u8Int)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <EXIT_u8INT_Enable+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
     e3a:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Int == INT0)
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	41 f4       	brne	.+16     	; 0xe52 <EXIT_u8INT_Enable+0x24>
	{
		SET_BIT(GICR,GICR_INT0);
     e42:	ab e5       	ldi	r26, 0x5B	; 91
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	eb e5       	ldi	r30, 0x5B	; 91
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	8c 93       	st	X, r24
     e50:	18 c0       	rjmp	.+48     	; 0xe82 <EXIT_u8INT_Enable+0x54>
	}
	else if (copy_u8Int == INT1)
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	41 f4       	brne	.+16     	; 0xe68 <EXIT_u8INT_Enable+0x3a>
	{
		SET_BIT(GICR,GICR_INT1);
     e58:	ab e5       	ldi	r26, 0x5B	; 91
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	eb e5       	ldi	r30, 0x5B	; 91
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	8c 93       	st	X, r24
     e66:	0d c0       	rjmp	.+26     	; 0xe82 <EXIT_u8INT_Enable+0x54>
	}
	else if(copy_u8Int == INT2)
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	41 f4       	brne	.+16     	; 0xe7e <EXIT_u8INT_Enable+0x50>
	{
		SET_BIT(GICR,GICR_INT2);
     e6e:	ab e5       	ldi	r26, 0x5B	; 91
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e5       	ldi	r30, 0x5B	; 91
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8c 93       	st	X, r24
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <EXIT_u8INT_Enable+0x54>
	}
	else
	{
		Local_u8Error_State=NOK;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
     e82:	89 81       	ldd	r24, Y+1	; 0x01


}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <EXIT_u8INT_Disable>:

u8 EXIT_u8INT_Disable(u8 copy_u8Int)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <EXIT_u8INT_Disable+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
     e9a:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Int == INT0)
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	41 f4       	brne	.+16     	; 0xeb2 <EXIT_u8INT_Disable+0x24>
	{
		CLR_BIT(GICR,GICR_INT0);
     ea2:	ab e5       	ldi	r26, 0x5B	; 91
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	eb e5       	ldi	r30, 0x5B	; 91
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8c 93       	st	X, r24
     eb0:	18 c0       	rjmp	.+48     	; 0xee2 <EXIT_u8INT_Disable+0x54>
	}
	else if (copy_u8Int == INT1)
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	41 f4       	brne	.+16     	; 0xec8 <EXIT_u8INT_Disable+0x3a>
	{
		CLR_BIT(GICR,GICR_INT1);
     eb8:	ab e5       	ldi	r26, 0x5B	; 91
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	eb e5       	ldi	r30, 0x5B	; 91
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 77       	andi	r24, 0x7F	; 127
     ec4:	8c 93       	st	X, r24
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <EXIT_u8INT_Disable+0x54>
	}
	else if(copy_u8Int == INT2)
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	41 f4       	brne	.+16     	; 0xede <EXIT_u8INT_Disable+0x50>
	{
		CLR_BIT(GICR,GICR_INT2);
     ece:	ab e5       	ldi	r26, 0x5B	; 91
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	eb e5       	ldi	r30, 0x5B	; 91
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8f 7d       	andi	r24, 0xDF	; 223
     eda:	8c 93       	st	X, r24
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <EXIT_u8INT_Disable+0x54>
	}
	else
	{
		Local_u8Error_State=NOK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01

}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <EXIT_u8Int0SetCallBack>:



/*call back function of int0*/
u8 EXIT_u8Int0SetCallBack(void (*copy_Int0PtrFunc)(void))
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <EXIT_u8Int0SetCallBack+0x6>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	9b 83       	std	Y+3, r25	; 0x03
     efc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
     efe:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Int0PtrFunc!=NULL)
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	9b 81       	ldd	r25, Y+3	; 0x03
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	39 f0       	breq	.+14     	; 0xf16 <EXIT_u8Int0SetCallBack+0x28>
	{
		EXIT_INT0PtrFunc=copy_Int0PtrFunc;
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	9b 81       	ldd	r25, Y+3	; 0x03
     f0c:	90 93 23 01 	sts	0x0123, r25
     f10:	80 93 22 01 	sts	0x0122, r24
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <EXIT_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8Error_State=NULL_POINTER;
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <__vector_1>:

/*ISR OF INT0*/
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)

{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	if(EXIT_INT0PtrFunc!=NULL)
     f52:	80 91 22 01 	lds	r24, 0x0122
     f56:	90 91 23 01 	lds	r25, 0x0123
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	29 f0       	breq	.+10     	; 0xf68 <__vector_1+0x40>
	{
		EXIT_INT0PtrFunc();
     f5e:	e0 91 22 01 	lds	r30, 0x0122
     f62:	f0 91 23 01 	lds	r31, 0x0123
     f66:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <EXIT_u8Int1SetCallBack>:


/*call back function of int1*/
u8 EXIT_u8Int1SetCallBack(void (*copy_Int1PtrFunc)(void))
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <EXIT_u8Int1SetCallBack+0x6>
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	9b 83       	std	Y+3, r25	; 0x03
     f9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
     f9e:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Int1PtrFunc!=NULL)
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	39 f0       	breq	.+14     	; 0xfb6 <EXIT_u8Int1SetCallBack+0x28>
	{
		EXIT_INT1PtrFunc=copy_Int1PtrFunc;
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	9b 81       	ldd	r25, Y+3	; 0x03
     fac:	90 93 25 01 	sts	0x0125, r25
     fb0:	80 93 24 01 	sts	0x0124, r24
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <EXIT_u8Int1SetCallBack+0x2c>
	}
	else
	{
		Local_u8Error_State=NULL_POINTER;
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <__vector_2>:

/*ISR OF INT2*/
void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)

{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	if(EXIT_INT1PtrFunc!=NULL)
     ff2:	80 91 24 01 	lds	r24, 0x0124
     ff6:	90 91 25 01 	lds	r25, 0x0125
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	29 f0       	breq	.+10     	; 0x1008 <__vector_2+0x40>
	{
		EXIT_INT1PtrFunc();
     ffe:	e0 91 24 01 	lds	r30, 0x0124
    1002:	f0 91 25 01 	lds	r31, 0x0125
    1006:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <EXIT_u8Int2SetCallBack>:



/*call back function of int2*/
u8 EXIT_u8Int2SetCallBack(void (*copy_Int2PtrFunc)(void))
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <EXIT_u8Int2SetCallBack+0x6>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    103e:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Int2PtrFunc!=NULL)
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	39 f0       	breq	.+14     	; 0x1056 <EXIT_u8Int2SetCallBack+0x28>
	{
		EXIT_INT2PtrFunc=copy_Int2PtrFunc;
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	9b 81       	ldd	r25, Y+3	; 0x03
    104c:	90 93 27 01 	sts	0x0127, r25
    1050:	80 93 26 01 	sts	0x0126, r24
    1054:	02 c0       	rjmp	.+4      	; 0x105a <EXIT_u8Int2SetCallBack+0x2c>
	}
	else
	{
		Local_u8Error_State=NULL_POINTER;
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <__vector_3>:

/*ISR OF INT2*/
void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)

{
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	2f 93       	push	r18
    1074:	3f 93       	push	r19
    1076:	4f 93       	push	r20
    1078:	5f 93       	push	r21
    107a:	6f 93       	push	r22
    107c:	7f 93       	push	r23
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
    1082:	af 93       	push	r26
    1084:	bf 93       	push	r27
    1086:	ef 93       	push	r30
    1088:	ff 93       	push	r31
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	if(EXIT_INT2PtrFunc!=NULL)
    1092:	80 91 26 01 	lds	r24, 0x0126
    1096:	90 91 27 01 	lds	r25, 0x0127
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	29 f0       	breq	.+10     	; 0x10a8 <__vector_3+0x40>
	{
		EXIT_INT2PtrFunc();
    109e:	e0 91 26 01 	lds	r30, 0x0126
    10a2:	f0 91 27 01 	lds	r31, 0x0127
    10a6:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	28 97       	sbiw	r28, 0x08	; 8
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	8a 83       	std	Y+2, r24	; 0x02
    10e4:	6b 83       	std	Y+3, r22	; 0x03
    10e6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Error_Sate =0;
    10e8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <DIO_u8SetPinDirection+0x24>
    10f0:	f4 c0       	rjmp	.+488    	; 0x12da <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction ==DIO_u8_PIN_OUTPUT)
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <DIO_u8SetPinDirection+0x2c>
    10f8:	72 c0       	rjmp	.+228    	; 0x11de <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	38 87       	std	Y+8, r19	; 0x08
    1102:	2f 83       	std	Y+7, r18	; 0x07
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	98 85       	ldd	r25, Y+8	; 0x08
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	49 f1       	breq	.+82     	; 0x1160 <DIO_u8SetPinDirection+0x92>
    110e:	2f 81       	ldd	r18, Y+7	; 0x07
    1110:	38 85       	ldd	r19, Y+8	; 0x08
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <DIO_u8SetPinDirection+0x54>
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	98 85       	ldd	r25, Y+8	; 0x08
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <DIO_u8SetPinDirection+0x6a>
    1120:	5b c0       	rjmp	.+182    	; 0x11d8 <DIO_u8SetPinDirection+0x10a>
    1122:	2f 81       	ldd	r18, Y+7	; 0x07
    1124:	38 85       	ldd	r19, Y+8	; 0x08
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	71 f1       	breq	.+92     	; 0x1188 <DIO_u8SetPinDirection+0xba>
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	98 85       	ldd	r25, Y+8	; 0x08
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	e9 f1       	breq	.+122    	; 0x11b0 <DIO_u8SetPinDirection+0xe2>
    1136:	50 c0       	rjmp	.+160    	; 0x11d8 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8_PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1138:	aa e3       	ldi	r26, 0x3A	; 58
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ea e3       	ldi	r30, 0x3A	; 58
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8SetPinDirection+0x88>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_u8SetPinDirection+0x84>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	bf c0       	rjmp	.+382    	; 0x12de <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    1160:	a7 e3       	ldi	r26, 0x37	; 55
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8SetPinDirection+0xb0>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8SetPinDirection+0xac>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	ab c0       	rjmp	.+342    	; 0x12de <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1188:	a4 e3       	ldi	r26, 0x34	; 52
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e4 e3       	ldi	r30, 0x34	; 52
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_u8SetPinDirection+0xd8>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_u8SetPinDirection+0xd4>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	97 c0       	rjmp	.+302    	; 0x12de <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    11b0:	a1 e3       	ldi	r26, 0x31	; 49
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e1 e3       	ldi	r30, 0x31	; 49
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8SetPinDirection+0x100>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8SetPinDirection+0xfc>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	83 c0       	rjmp	.+262    	; 0x12de <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	80 c0       	rjmp	.+256    	; 0x12de <DIO_u8SetPinDirection+0x210>

			}
		}
		else if(Copy_u8Direction ==DIO_u8_PIN_INPUT)
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	88 23       	and	r24, r24
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <DIO_u8SetPinDirection+0x118>
    11e4:	77 c0       	rjmp	.+238    	; 0x12d4 <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3e 83       	std	Y+6, r19	; 0x06
    11ee:	2d 83       	std	Y+5, r18	; 0x05
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	59 f1       	breq	.+86     	; 0x1250 <DIO_u8SetPinDirection+0x182>
    11fa:	2d 81       	ldd	r18, Y+5	; 0x05
    11fc:	3e 81       	ldd	r19, Y+6	; 0x06
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <DIO_u8SetPinDirection+0x140>
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	69 f0       	breq	.+26     	; 0x1226 <DIO_u8SetPinDirection+0x158>
    120c:	60 c0       	rjmp	.+192    	; 0x12ce <DIO_u8SetPinDirection+0x200>
    120e:	2d 81       	ldd	r18, Y+5	; 0x05
    1210:	3e 81       	ldd	r19, Y+6	; 0x06
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	89 f1       	breq	.+98     	; 0x127a <DIO_u8SetPinDirection+0x1ac>
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <DIO_u8SetPinDirection+0x156>
    1222:	40 c0       	rjmp	.+128    	; 0x12a4 <DIO_u8SetPinDirection+0x1d6>
    1224:	54 c0       	rjmp	.+168    	; 0x12ce <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1226:	aa e3       	ldi	r26, 0x3A	; 58
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ea e3       	ldi	r30, 0x3A	; 58
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_u8SetPinDirection+0x176>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_u8SetPinDirection+0x172>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	47 c0       	rjmp	.+142    	; 0x12de <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    1250:	a7 e3       	ldi	r26, 0x37	; 55
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8SetPinDirection+0x1a0>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8SetPinDirection+0x19c>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	32 c0       	rjmp	.+100    	; 0x12de <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    127a:	a4 e3       	ldi	r26, 0x34	; 52
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e4 e3       	ldi	r30, 0x34	; 52
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8SetPinDirection+0x1ca>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8SetPinDirection+0x1c6>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	1d c0       	rjmp	.+58     	; 0x12de <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    12a4:	a1 e3       	ldi	r26, 0x31	; 49
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e1 e3       	ldi	r30, 0x31	; 49
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8SetPinDirection+0x1f4>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8SetPinDirection+0x1f0>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	08 c0       	rjmp	.+16     	; 0x12de <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <DIO_u8SetPinDirection+0x210>

			}
		}
		else
		{
			Local_u8Error_Sate=1 ;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8Error_Sate=1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_Sate;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e0:	28 96       	adiw	r28, 0x08	; 8
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_u8SetPortDirection+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_u8SetPortDirection+0x8>
    12fa:	0f 92       	push	r0
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8a 83       	std	Y+2, r24	; 0x02
    1302:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
    1304:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	3d 83       	std	Y+5, r19	; 0x05
    130e:	2c 83       	std	Y+4, r18	; 0x04
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	91 05       	cpc	r25, r1
    1318:	d1 f0       	breq	.+52     	; 0x134e <DIO_u8SetPortDirection+0x5c>
    131a:	2c 81       	ldd	r18, Y+4	; 0x04
    131c:	3d 81       	ldd	r19, Y+5	; 0x05
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	2c f4       	brge	.+10     	; 0x132e <DIO_u8SetPortDirection+0x3c>
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	9d 81       	ldd	r25, Y+5	; 0x05
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	61 f0       	breq	.+24     	; 0x1344 <DIO_u8SetPortDirection+0x52>
    132c:	1f c0       	rjmp	.+62     	; 0x136c <DIO_u8SetPortDirection+0x7a>
    132e:	2c 81       	ldd	r18, Y+4	; 0x04
    1330:	3d 81       	ldd	r19, Y+5	; 0x05
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	81 f0       	breq	.+32     	; 0x1358 <DIO_u8SetPortDirection+0x66>
    1338:	8c 81       	ldd	r24, Y+4	; 0x04
    133a:	9d 81       	ldd	r25, Y+5	; 0x05
    133c:	83 30       	cpi	r24, 0x03	; 3
    133e:	91 05       	cpc	r25, r1
    1340:	81 f0       	breq	.+32     	; 0x1362 <DIO_u8SetPortDirection+0x70>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8_PORTA : DDRA =Copy_u8Direction; break;
    1344:	ea e3       	ldi	r30, 0x3A	; 58
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	80 83       	st	Z, r24
    134c:	11 c0       	rjmp	.+34     	; 0x1370 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTB : DDRB =Copy_u8Direction; break;
    134e:	e7 e3       	ldi	r30, 0x37	; 55
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	80 83       	st	Z, r24
    1356:	0c c0       	rjmp	.+24     	; 0x1370 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTC : DDRC =Copy_u8Direction; break;
    1358:	e4 e3       	ldi	r30, 0x34	; 52
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	80 83       	st	Z, r24
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTD : DDRD =Copy_u8Direction; break;
    1362:	e1 e3       	ldi	r30, 0x31	; 49
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	80 83       	st	Z, r24
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_u8SetPortDirection+0x7e>
	default :Local_u8_ErrorState=1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1370:	89 81       	ldd	r24, Y+1	; 0x01

}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <DIO_u8SetPinValue>:



u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	28 97       	sbiw	r28, 0x08	; 8
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	8a 83       	std	Y+2, r24	; 0x02
    1398:	6b 83       	std	Y+3, r22	; 0x03
    139a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
    139c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <DIO_u8SetPinValue+0x24>
    13a4:	f4 c0       	rjmp	.+488    	; 0x158e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value ==DIO_u8_PIN_HIGH)
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <DIO_u8SetPinValue+0x2c>
    13ac:	72 c0       	rjmp	.+228    	; 0x1492 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	38 87       	std	Y+8, r19	; 0x08
    13b6:	2f 83       	std	Y+7, r18	; 0x07
    13b8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ba:	98 85       	ldd	r25, Y+8	; 0x08
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	49 f1       	breq	.+82     	; 0x1414 <DIO_u8SetPinValue+0x92>
    13c2:	2f 81       	ldd	r18, Y+7	; 0x07
    13c4:	38 85       	ldd	r19, Y+8	; 0x08
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <DIO_u8SetPinValue+0x54>
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f0       	breq	.+24     	; 0x13ec <DIO_u8SetPinValue+0x6a>
    13d4:	5b c0       	rjmp	.+182    	; 0x148c <DIO_u8SetPinValue+0x10a>
    13d6:	2f 81       	ldd	r18, Y+7	; 0x07
    13d8:	38 85       	ldd	r19, Y+8	; 0x08
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	71 f1       	breq	.+92     	; 0x143c <DIO_u8SetPinValue+0xba>
    13e0:	8f 81       	ldd	r24, Y+7	; 0x07
    13e2:	98 85       	ldd	r25, Y+8	; 0x08
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	91 05       	cpc	r25, r1
    13e8:	e9 f1       	breq	.+122    	; 0x1464 <DIO_u8SetPinValue+0xe2>
    13ea:	50 c0       	rjmp	.+160    	; 0x148c <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8_PORTA :SET_BIT(PORTA,Copy_u8Pin); break;
    13ec:	ab e3       	ldi	r26, 0x3B	; 59
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	eb e3       	ldi	r30, 0x3B	; 59
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_u8SetPinValue+0x88>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_u8SetPinValue+0x84>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	bf c0       	rjmp	.+382    	; 0x1592 <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :SET_BIT(PORTB,Copy_u8Pin); break;
    1414:	a8 e3       	ldi	r26, 0x38	; 56
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e3       	ldi	r30, 0x38	; 56
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_u8SetPinValue+0xb0>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_u8SetPinValue+0xac>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	ab c0       	rjmp	.+342    	; 0x1592 <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :SET_BIT(PORTC,Copy_u8Pin); break;
    143c:	a5 e3       	ldi	r26, 0x35	; 53
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e5 e3       	ldi	r30, 0x35	; 53
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_u8SetPinValue+0xd8>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_u8SetPinValue+0xd4>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	97 c0       	rjmp	.+302    	; 0x1592 <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :SET_BIT(PORTD,Copy_u8Pin); break;
    1464:	a2 e3       	ldi	r26, 0x32	; 50
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_u8SetPinValue+0x100>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_u8SetPinValue+0xfc>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	83 c0       	rjmp	.+262    	; 0x1592 <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	80 c0       	rjmp	.+256    	; 0x1592 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value ==DIO_u8_PIN_LOW)
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	88 23       	and	r24, r24
    1496:	09 f0       	breq	.+2      	; 0x149a <DIO_u8SetPinValue+0x118>
    1498:	77 c0       	rjmp	.+238    	; 0x1588 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3e 83       	std	Y+6, r19	; 0x06
    14a2:	2d 83       	std	Y+5, r18	; 0x05
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	59 f1       	breq	.+86     	; 0x1504 <DIO_u8SetPinValue+0x182>
    14ae:	2d 81       	ldd	r18, Y+5	; 0x05
    14b0:	3e 81       	ldd	r19, Y+6	; 0x06
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <DIO_u8SetPinValue+0x140>
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f0       	breq	.+26     	; 0x14da <DIO_u8SetPinValue+0x158>
    14c0:	60 c0       	rjmp	.+192    	; 0x1582 <DIO_u8SetPinValue+0x200>
    14c2:	2d 81       	ldd	r18, Y+5	; 0x05
    14c4:	3e 81       	ldd	r19, Y+6	; 0x06
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	89 f1       	breq	.+98     	; 0x152e <DIO_u8SetPinValue+0x1ac>
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <DIO_u8SetPinValue+0x156>
    14d6:	40 c0       	rjmp	.+128    	; 0x1558 <DIO_u8SetPinValue+0x1d6>
    14d8:	54 c0       	rjmp	.+168    	; 0x1582 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8_PORTA :CLR_BIT(PORTA,Copy_u8Pin); break;
    14da:	ab e3       	ldi	r26, 0x3B	; 59
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e3       	ldi	r30, 0x3B	; 59
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8SetPinValue+0x176>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8SetPinValue+0x172>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	47 c0       	rjmp	.+142    	; 0x1592 <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :CLR_BIT(PORTB,Copy_u8Pin); break;
    1504:	a8 e3       	ldi	r26, 0x38	; 56
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e3       	ldi	r30, 0x38	; 56
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8SetPinValue+0x1a0>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_u8SetPinValue+0x19c>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	32 c0       	rjmp	.+100    	; 0x1592 <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :CLR_BIT(PORTC,Copy_u8Pin); break;
    152e:	a5 e3       	ldi	r26, 0x35	; 53
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e5 e3       	ldi	r30, 0x35	; 53
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_u8SetPinValue+0x1ca>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_u8SetPinValue+0x1c6>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	1d c0       	rjmp	.+58     	; 0x1592 <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :CLR_BIT(PORTD,Copy_u8Pin); break;
    1558:	a2 e3       	ldi	r26, 0x32	; 50
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 e3       	ldi	r30, 0x32	; 50
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_u8SetPinValue+0x1f4>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_u8SetPinValue+0x1f0>
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8_ErrorState=1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8_ErrorState;
    1592:	89 81       	ldd	r24, Y+1	; 0x01

}
    1594:	28 96       	adiw	r28, 0x08	; 8
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <DIO_u8SetPortValue+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <DIO_u8SetPortValue+0x8>
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	8a 83       	std	Y+2, r24	; 0x02
    15b6:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
    15b8:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3d 83       	std	Y+5, r19	; 0x05
    15c2:	2c 83       	std	Y+4, r18	; 0x04
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	d1 f0       	breq	.+52     	; 0x1602 <DIO_u8SetPortValue+0x5c>
    15ce:	2c 81       	ldd	r18, Y+4	; 0x04
    15d0:	3d 81       	ldd	r19, Y+5	; 0x05
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <DIO_u8SetPortValue+0x3c>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	61 f0       	breq	.+24     	; 0x15f8 <DIO_u8SetPortValue+0x52>
    15e0:	1f c0       	rjmp	.+62     	; 0x1620 <DIO_u8SetPortValue+0x7a>
    15e2:	2c 81       	ldd	r18, Y+4	; 0x04
    15e4:	3d 81       	ldd	r19, Y+5	; 0x05
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	31 05       	cpc	r19, r1
    15ea:	81 f0       	breq	.+32     	; 0x160c <DIO_u8SetPortValue+0x66>
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	9d 81       	ldd	r25, Y+5	; 0x05
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	91 05       	cpc	r25, r1
    15f4:	81 f0       	breq	.+32     	; 0x1616 <DIO_u8SetPortValue+0x70>
    15f6:	14 c0       	rjmp	.+40     	; 0x1620 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8_PORTA : PORTA =Copy_u8Value; break;
    15f8:	eb e3       	ldi	r30, 0x3B	; 59
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	80 83       	st	Z, r24
    1600:	11 c0       	rjmp	.+34     	; 0x1624 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB : PORTB =Copy_u8Value; break;
    1602:	e8 e3       	ldi	r30, 0x38	; 56
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	80 83       	st	Z, r24
    160a:	0c c0       	rjmp	.+24     	; 0x1624 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC : PORTC =Copy_u8Value; break;
    160c:	e5 e3       	ldi	r30, 0x35	; 53
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 83       	st	Z, r24
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD : PORTD =Copy_u8Value; break;
    1616:	e2 e3       	ldi	r30, 0x32	; 50
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	80 83       	st	Z, r24
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_u8SetPortValue+0x7e>
	default :Local_u8_ErrorState=1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1624:	89 81       	ldd	r24, Y+1	; 0x01



}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 *Copy_Pu8Vlaue)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	27 97       	sbiw	r28, 0x07	; 7
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	6b 83       	std	Y+3, r22	; 0x03
    164e:	5d 83       	std	Y+5, r21	; 0x05
    1650:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
    1652:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Pu8Vlaue != NULL)&&(Copy_u8Pin <=DIO_u8_PIN7))
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	09 f4       	brne	.+2      	; 0x165e <DIO_u8GetPinValue+0x28>
    165c:	78 c0       	rjmp	.+240    	; 0x174e <DIO_u8GetPinValue+0x118>
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 30       	cpi	r24, 0x08	; 8
    1662:	08 f0       	brcs	.+2      	; 0x1666 <DIO_u8GetPinValue+0x30>
    1664:	74 c0       	rjmp	.+232    	; 0x174e <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3f 83       	std	Y+7, r19	; 0x07
    166e:	2e 83       	std	Y+6, r18	; 0x06
    1670:	4e 81       	ldd	r20, Y+6	; 0x06
    1672:	5f 81       	ldd	r21, Y+7	; 0x07
    1674:	41 30       	cpi	r20, 0x01	; 1
    1676:	51 05       	cpc	r21, r1
    1678:	59 f1       	breq	.+86     	; 0x16d0 <DIO_u8GetPinValue+0x9a>
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	9f 81       	ldd	r25, Y+7	; 0x07
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	91 05       	cpc	r25, r1
    1682:	34 f4       	brge	.+12     	; 0x1690 <DIO_u8GetPinValue+0x5a>
    1684:	2e 81       	ldd	r18, Y+6	; 0x06
    1686:	3f 81       	ldd	r19, Y+7	; 0x07
    1688:	21 15       	cp	r18, r1
    168a:	31 05       	cpc	r19, r1
    168c:	69 f0       	breq	.+26     	; 0x16a8 <DIO_u8GetPinValue+0x72>
    168e:	5c c0       	rjmp	.+184    	; 0x1748 <DIO_u8GetPinValue+0x112>
    1690:	4e 81       	ldd	r20, Y+6	; 0x06
    1692:	5f 81       	ldd	r21, Y+7	; 0x07
    1694:	42 30       	cpi	r20, 0x02	; 2
    1696:	51 05       	cpc	r21, r1
    1698:	79 f1       	breq	.+94     	; 0x16f8 <DIO_u8GetPinValue+0xc2>
    169a:	8e 81       	ldd	r24, Y+6	; 0x06
    169c:	9f 81       	ldd	r25, Y+7	; 0x07
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <DIO_u8GetPinValue+0x70>
    16a4:	3d c0       	rjmp	.+122    	; 0x1720 <DIO_u8GetPinValue+0xea>
    16a6:	50 c0       	rjmp	.+160    	; 0x1748 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8_PORTA : *Copy_Pu8Vlaue =GET_BIT(PINA , Copy_u8Pin); break;
    16a8:	e9 e3       	ldi	r30, 0x39	; 57
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_u8GetPinValue+0x8a>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_u8GetPinValue+0x86>
    16c4:	ca 01       	movw	r24, r20
    16c6:	81 70       	andi	r24, 0x01	; 1
    16c8:	ec 81       	ldd	r30, Y+4	; 0x04
    16ca:	fd 81       	ldd	r31, Y+5	; 0x05
    16cc:	80 83       	st	Z, r24
    16ce:	41 c0       	rjmp	.+130    	; 0x1752 <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTB : *Copy_Pu8Vlaue =GET_BIT(PINB , Copy_u8Pin); break;
    16d0:	e6 e3       	ldi	r30, 0x36	; 54
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_u8GetPinValue+0xb2>
    16e4:	55 95       	asr	r21
    16e6:	47 95       	ror	r20
    16e8:	8a 95       	dec	r24
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_u8GetPinValue+0xae>
    16ec:	ca 01       	movw	r24, r20
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	80 83       	st	Z, r24
    16f6:	2d c0       	rjmp	.+90     	; 0x1752 <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTC : *Copy_Pu8Vlaue =GET_BIT(PINC , Copy_u8Pin); break;
    16f8:	e3 e3       	ldi	r30, 0x33	; 51
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a9 01       	movw	r20, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_u8GetPinValue+0xda>
    170c:	55 95       	asr	r21
    170e:	47 95       	ror	r20
    1710:	8a 95       	dec	r24
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_u8GetPinValue+0xd6>
    1714:	ca 01       	movw	r24, r20
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	ec 81       	ldd	r30, Y+4	; 0x04
    171a:	fd 81       	ldd	r31, Y+5	; 0x05
    171c:	80 83       	st	Z, r24
    171e:	19 c0       	rjmp	.+50     	; 0x1752 <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTD : *Copy_Pu8Vlaue =GET_BIT(PIND , Copy_u8Pin); break;
    1720:	e0 e3       	ldi	r30, 0x30	; 48
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_u8GetPinValue+0x102>
    1734:	55 95       	asr	r21
    1736:	47 95       	ror	r20
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_u8GetPinValue+0xfe>
    173c:	ca 01       	movw	r24, r20
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	ec 81       	ldd	r30, Y+4	; 0x04
    1742:	fd 81       	ldd	r31, Y+5	; 0x05
    1744:	80 83       	st	Z, r24
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <DIO_u8GetPinValue+0x11c>
		default :Local_u8_ErrorState=1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8_ErrorState;
    1752:	89 81       	ldd	r24, Y+1	; 0x01

}
    1754:	27 96       	adiw	r28, 0x07	; 7
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <ADC_voidInit>:
u16 ADC_u16DigitalValue=0;
u8 ADC_u8BusyState = NOTBUSY;


void ADC_voidInit(void)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);

#elif ADC_REFERENCE_VOLT ==AVCC
	CLR_BIT(ADMUX,ADMUX_REFS1);
    176e:	a7 e2       	ldi	r26, 0x27	; 39
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e7 e2       	ldi	r30, 0x27	; 39
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8f 77       	andi	r24, 0x7F	; 127
    177a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    177c:	a7 e2       	ldi	r26, 0x27	; 39
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e7 e2       	ldi	r30, 0x27	; 39
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 64       	ori	r24, 0x40	; 64
    1788:	8c 93       	st	X, r24
#endif


	/*	Set Resolution */
#if  Resolution == Eight_bits
	SET_BIT(ADMUX,ADMUX_ADLAR);
    178a:	a7 e2       	ldi	r26, 0x27	; 39
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e7 e2       	ldi	r30, 0x27	; 39
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 62       	ori	r24, 0x20	; 32
    1796:	8c 93       	st	X, r24
	ADCSRA |= factor_32 ;
#elif Prescaler_Factor == factor_64
	ADCSRA &=0b11111000;
	ADCSRA |= factor_64 ;
#elif Prescaler_Factor == factor_128
	ADCSRA &=0b11111000;
    1798:	a6 e2       	ldi	r26, 0x26	; 38
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e6 e2       	ldi	r30, 0x26	; 38
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	88 7f       	andi	r24, 0xF8	; 248
    17a4:	8c 93       	st	X, r24
	ADCSRA |=  (factor_128 &(0x07)) ;
    17a6:	a6 e2       	ldi	r26, 0x26	; 38
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e6 e2       	ldi	r30, 0x26	; 38
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	87 60       	ori	r24, 0x07	; 7
    17b2:	8c 93       	st	X, r24
#error "choose the correct option"
#endif

	/* check ADC_Status enabled or disabled */
#if ADC_Status == Enabled
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    17b4:	a6 e2       	ldi	r26, 0x26	; 38
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e6 e2       	ldi	r30, 0x26	; 38
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	8c 93       	st	X, r24

	// ADC Polling
	//CLR_BIT(ADCSRA, ADCSRA_ADIE);


}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <ADC_u16StartConversionSynchronous>:


u16 ADC_u16StartConversionSynchronous(u8 copy_u8Channel)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <ADC_u16StartConversionSynchronous+0x6>
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState == BUSY)
    17d6:	80 91 2c 01 	lds	r24, 0x012C
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	19 f4       	brne	.+6      	; 0x17e4 <ADC_u16StartConversionSynchronous+0x1c>
	{
		return 0;
    17de:	1b 82       	std	Y+3, r1	; 0x03
    17e0:	1a 82       	std	Y+2, r1	; 0x02
    17e2:	36 c0       	rjmp	.+108    	; 0x1850 <ADC_u16StartConversionSynchronous+0x88>
	}
	else
	{
		ADC_u8BusyState = BUSY;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	80 93 2c 01 	sts	0x012C, r24

		/*clear the mux bits in ADMUX Register*/
		ADMUX &=0b11100000;
    17ea:	a7 e2       	ldi	r26, 0x27	; 39
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e7 e2       	ldi	r30, 0x27	; 39
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 7e       	andi	r24, 0xE0	; 224
    17f6:	8c 93       	st	X, r24
		/*set required channel into the Mux bits */
		ADMUX|= (copy_u8Channel & 0x1f);
    17f8:	a7 e2       	ldi	r26, 0x27	; 39
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e7 e2       	ldi	r30, 0x27	; 39
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	98 2f       	mov	r25, r24
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	8f 71       	andi	r24, 0x1F	; 31
    1808:	89 2b       	or	r24, r25
    180a:	8c 93       	st	X, r24
		/*Start The Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    180c:	a6 e2       	ldi	r26, 0x26	; 38
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e6 e2       	ldi	r30, 0x26	; 38
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	80 64       	ori	r24, 0x40	; 64
    1818:	8c 93       	st	X, r24
		/*Polling (busy waiting) until the conversion complete flag is set*/
		while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    181a:	e6 e2       	ldi	r30, 0x26	; 38
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	82 95       	swap	r24
    1822:	8f 70       	andi	r24, 0x0F	; 15
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	90 70       	andi	r25, 0x00	; 0
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	a9 f3       	breq	.-22     	; 0x181a <ADC_u16StartConversionSynchronous+0x52>

		/*Clear conversion complete flag */
		SET_BIT(ADCSRA,ADCSRA_ADIF);
    1830:	a6 e2       	ldi	r26, 0x26	; 38
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e6 e2       	ldi	r30, 0x26	; 38
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 61       	ori	r24, 0x10	; 16
    183c:	8c 93       	st	X, r24
		ADC_u8BusyState = NOTBUSY;
    183e:	10 92 2c 01 	sts	0x012C, r1

#if  Resolution == Eight_bits
		/*return reading*/
		return ADCH;
    1842:	e5 e2       	ldi	r30, 0x25	; 37
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3b 83       	std	Y+3, r19	; 0x03
    184e:	2a 83       	std	Y+2, r18	; 0x02
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
#else
#error "choose the correct option"
#endif

	}
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <ADC_u16StartConversionAsynchronous>:

u16 ADC_u16StartConversionAsynchronous(u8 copy_u8Channel,  void (*Copy_pvCallBackFunction)(void))
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <ADC_u16StartConversionAsynchronous+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <ADC_u16StartConversionAsynchronous+0x8>
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	7b 83       	std	Y+3, r23	; 0x03
    1872:	6a 83       	std	Y+2, r22	; 0x02
	if(ADC_u8BusyState == BUSY)
    1874:	80 91 2c 01 	lds	r24, 0x012C
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	29 f4       	brne	.+10     	; 0x1886 <ADC_u16StartConversionAsynchronous+0x26>
	{
		return 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9d 83       	std	Y+5, r25	; 0x05
    1882:	8c 83       	std	Y+4, r24	; 0x04
    1884:	2a c0       	rjmp	.+84     	; 0x18da <ADC_u16StartConversionAsynchronous+0x7a>

	}
	else
	{
		ADC_u8BusyState = BUSY;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 2c 01 	sts	0x012C, r24
		/*clear the mux bits in ADMUX Register*/
		ADMUX &=0b11100000;
    188c:	a7 e2       	ldi	r26, 0x27	; 39
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e7 e2       	ldi	r30, 0x27	; 39
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	80 7e       	andi	r24, 0xE0	; 224
    1898:	8c 93       	st	X, r24
		/*set required channel into the Mux bits */
		ADMUX|= (copy_u8Channel & 0x1f);
    189a:	a7 e2       	ldi	r26, 0x27	; 39
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e7 e2       	ldi	r30, 0x27	; 39
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	98 2f       	mov	r25, r24
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	8f 71       	andi	r24, 0x1F	; 31
    18aa:	89 2b       	or	r24, r25
    18ac:	8c 93       	st	X, r24
		/*Set The CallBack Function*/
		Global_pvNotificationFunction = Copy_pvCallBackFunction;
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	90 93 29 01 	sts	0x0129, r25
    18b6:	80 93 28 01 	sts	0x0128, r24
		/*ADC Interrupt Enable*/
		SET_BIT(ADCSRA, ADCSRA_ADIE);
    18ba:	a6 e2       	ldi	r26, 0x26	; 38
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e6 e2       	ldi	r30, 0x26	; 38
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 60       	ori	r24, 0x08	; 8
    18c6:	8c 93       	st	X, r24
		/*Start The Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    18c8:	a6 e2       	ldi	r26, 0x26	; 38
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e6 e2       	ldi	r30, 0x26	; 38
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 64       	ori	r24, 0x40	; 64
    18d4:	8c 93       	st	X, r24

		return 0;
    18d6:	1d 82       	std	Y+5, r1	; 0x05
    18d8:	1c 82       	std	Y+4, r1	; 0x04
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05

	}

}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <__vector_16>:


void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	2f 93       	push	r18
    18fa:	3f 93       	push	r19
    18fc:	4f 93       	push	r20
    18fe:	5f 93       	push	r21
    1900:	6f 93       	push	r22
    1902:	7f 93       	push	r23
    1904:	8f 93       	push	r24
    1906:	9f 93       	push	r25
    1908:	af 93       	push	r26
    190a:	bf 93       	push	r27
    190c:	ef 93       	push	r30
    190e:	ff 93       	push	r31
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62

	/*Check if the Global Pointer To Function points to NULL*/
	if(Global_pvNotificationFunction != NULL)
    1918:	80 91 28 01 	lds	r24, 0x0128
    191c:	90 91 29 01 	lds	r25, 0x0129
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	b9 f0       	breq	.+46     	; 0x1952 <__vector_16+0x64>
	{
		/*Read The Result*/
		ADC_u16DigitalValue= ADCH;
    1924:	e5 e2       	ldi	r30, 0x25	; 37
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	90 93 2b 01 	sts	0x012B, r25
    1932:	80 93 2a 01 	sts	0x012A, r24
		/*invoke the call back function*/
		Global_pvNotificationFunction();
    1936:	e0 91 28 01 	lds	r30, 0x0128
    193a:	f0 91 29 01 	lds	r31, 0x0129
    193e:	09 95       	icall
		/*Set ADC To Be Not Busy*/
		ADC_u8BusyState = NOTBUSY;
    1940:	10 92 2c 01 	sts	0x012C, r1
		/*Disable ADC Interrupt*/
		CLR_BIT(ADCSRA, ADCSRA_ADIE);
    1944:	a6 e2       	ldi	r26, 0x26	; 38
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e6 e2       	ldi	r30, 0x26	; 38
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	87 7f       	andi	r24, 0xF7	; 247
    1950:	8c 93       	st	X, r24
	else
	{
		/*Do Nothing*/
	}

}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <ADC_GetVolt_Synchronous>:

u16 ADC_GetVolt_Synchronous (u8 copy_u8Channel)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <ADC_GetVolt_Synchronous+0x6>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <ADC_GetVolt_Synchronous+0x8>
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	8d 83       	std	Y+5, r24	; 0x05
	u32 digital = ADC_u16StartConversionSynchronous(copy_u8Channel);
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <ADC_u16StartConversionSynchronous>
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03

	u16 volt=(u16)(((u32)digital*5000UL)/256UL);;
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	cc 01       	movw	r24, r24
    1998:	a0 e0       	ldi	r26, 0x00	; 0
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	28 e8       	ldi	r18, 0x88	; 136
    199e:	33 e1       	ldi	r19, 0x13	; 19
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__mulsi3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	89 2f       	mov	r24, r25
    19b2:	9a 2f       	mov	r25, r26
    19b4:	ab 2f       	mov	r26, r27
    19b6:	bb 27       	eor	r27, r27
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
	return volt;
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <ADC_GetVolt>:


u16 ADC_GetVolt (void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <ADC_GetVolt+0x6>
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62

	u16 volt=(u16)(((u32)ADC_u16DigitalValue*5000UL)/256UL);;
    19da:	80 91 2a 01 	lds	r24, 0x012A
    19de:	90 91 2b 01 	lds	r25, 0x012B
    19e2:	cc 01       	movw	r24, r24
    19e4:	a0 e0       	ldi	r26, 0x00	; 0
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	28 e8       	ldi	r18, 0x88	; 136
    19ea:	33 e1       	ldi	r19, 0x13	; 19
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <__mulsi3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	89 2f       	mov	r24, r25
    19fe:	9a 2f       	mov	r25, r26
    1a00:	ab 2f       	mov	r26, r27
    1a02:	bb 27       	eor	r27, r27
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
	return volt;
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <ssd_u8Enable>:

u8 number[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};


u8 ssd_u8Enable(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <ssd_u8Enable+0x6>
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState =0;
    1a26:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8_PIN7)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 30       	cpi	r24, 0x08	; 8
    1a2c:	58 f4       	brcc	.+22     	; 0x1a44 <ssd_u8Enable+0x2e>
	{

#if COM_TYPE == CATHOD
		DIO_u8SetPinDirection(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_OUTPUT);
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	6b 81       	ldd	r22, Y+3	; 0x03
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_LOW);
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	6b 81       	ldd	r22, Y+3	; 0x03
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <ssd_u8Enable+0x32>
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_HIGH);
#endif
	}
	else
	{
		Local_u8_ErrorState=1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <ssd_u8Disable>:


u8 ssd_u8Disable(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <ssd_u8Disable+0x6>
    1a5c:	0f 92       	push	r0
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	8a 83       	std	Y+2, r24	; 0x02
    1a64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState =0;
    1a66:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Pin <= DIO_u8_PIN7)
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	88 30       	cpi	r24, 0x08	; 8
    1a6c:	30 f4       	brcc	.+12     	; 0x1a7a <ssd_u8Disable+0x24>
	{
#if COM_TYPE ==CATHOD
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_HIGH);
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	6b 81       	ldd	r22, Y+3	; 0x03
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <ssd_u8Disable+0x28>
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_LOW);
#endif
	}
	else
	{
		Local_u8_ErrorState=1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <ssd_u8SendNumber>:


u8 ssd_u8SendNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <ssd_u8SendNumber+0x6>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <ssd_u8SendNumber+0x8>
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
    1a9c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState =0;
    1a9e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Number <= 9) //number[9]
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	8a 30       	cpi	r24, 0x0A	; 10
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <ssd_u8SendNumber+0x1c>
    1aa6:	56 c0       	rjmp	.+172    	; 0x1b54 <ssd_u8SendNumber+0xc8>
	{

		DIO_u8SetPortDirection(Copy_u8Port,DIO_u8_PORT_OUTPUT);
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	6f ef       	ldi	r22, 0xFF	; 255
    1aac:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_u8SetPortDirection>

		switch (Copy_u8Port)
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3d 83       	std	Y+5, r19	; 0x05
    1ab8:	2c 83       	std	Y+4, r18	; 0x04
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	9d 81       	ldd	r25, Y+5	; 0x05
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	09 f1       	breq	.+66     	; 0x1b06 <ssd_u8SendNumber+0x7a>
    1ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <ssd_u8SendNumber+0x4c>
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	61 f0       	breq	.+24     	; 0x1aee <ssd_u8SendNumber+0x62>
    1ad6:	3b c0       	rjmp	.+118    	; 0x1b4e <ssd_u8SendNumber+0xc2>
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	f1 f0       	breq	.+60     	; 0x1b1e <ssd_u8SendNumber+0x92>
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	83 30       	cpi	r24, 0x03	; 3
    1ae8:	91 05       	cpc	r25, r1
    1aea:	29 f1       	breq	.+74     	; 0x1b36 <ssd_u8SendNumber+0xaa>
    1aec:	30 c0       	rjmp	.+96     	; 0x1b4e <ssd_u8SendNumber+0xc2>
		{

#if COM_TYPE ==CATHOD

		case DIO_u8_PORTA :DIO_u8SetPortValue(DIO_u8_PORTA,number[Copy_u8Number]); break;
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	fc 01       	movw	r30, r24
    1af6:	e1 50       	subi	r30, 0x01	; 1
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	90 81       	ld	r25, Z
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	69 2f       	mov	r22, r25
    1b00:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_u8SetPortValue>
    1b04:	29 c0       	rjmp	.+82     	; 0x1b58 <ssd_u8SendNumber+0xcc>
		case DIO_u8_PORTB :DIO_u8SetPortValue(DIO_u8_PORTB,number[Copy_u8Number]); break;
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e1 50       	subi	r30, 0x01	; 1
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	90 81       	ld	r25, Z
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	69 2f       	mov	r22, r25
    1b18:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_u8SetPortValue>
    1b1c:	1d c0       	rjmp	.+58     	; 0x1b58 <ssd_u8SendNumber+0xcc>
		case DIO_u8_PORTC :DIO_u8SetPortValue(DIO_u8_PORTC,number[Copy_u8Number]); break;
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	fc 01       	movw	r30, r24
    1b26:	e1 50       	subi	r30, 0x01	; 1
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	90 81       	ld	r25, Z
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	69 2f       	mov	r22, r25
    1b30:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_u8SetPortValue>
    1b34:	11 c0       	rjmp	.+34     	; 0x1b58 <ssd_u8SendNumber+0xcc>
		case DIO_u8_PORTD :DIO_u8SetPortValue(DIO_u8_PORTD,number[Copy_u8Number]); break;
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e1 50       	subi	r30, 0x01	; 1
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	90 81       	ld	r25, Z
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	69 2f       	mov	r22, r25
    1b48:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_u8SetPortValue>
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <ssd_u8SendNumber+0xcc>
		default : Local_u8_ErrorState=1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <ssd_u8SendNumber+0xcc>
		}

	}
	else
	{
		Local_u8_ErrorState=1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <ssd_u8SendNumber_Mul>:



u8 ssd_u8SendNumber_Mul(u8 Copy_u8Port,u8 Copy_u8ComPort,u8 Copy_u8Number1, u8 Copy_u8Com1, u8 Copy_u8Number2, u8 Copy_u8Com2)
{
    1b6a:	ef 92       	push	r14
    1b6c:	0f 93       	push	r16
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	a3 97       	sbiw	r28, 0x23	; 35
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	8e 8f       	std	Y+30, r24	; 0x1e
    1b84:	6f 8f       	std	Y+31, r22	; 0x1f
    1b86:	48 a3       	std	Y+32, r20	; 0x20
    1b88:	29 a3       	std	Y+33, r18	; 0x21
    1b8a:	0a a3       	std	Y+34, r16	; 0x22
    1b8c:	eb a2       	std	Y+35, r14	; 0x23

	u8 Local_u8_ErrorState =0;
    1b8e:	1d 8e       	std	Y+29, r1	; 0x1d
	if((Copy_u8Number1 <= number[9]) && (Copy_u8Number2 <= number[9]))
    1b90:	90 91 08 01 	lds	r25, 0x0108
    1b94:	88 a1       	ldd	r24, Y+32	; 0x20
    1b96:	98 17       	cp	r25, r24
    1b98:	08 f4       	brcc	.+2      	; 0x1b9c <ssd_u8SendNumber_Mul+0x32>
    1b9a:	03 c1       	rjmp	.+518    	; 0x1da2 <ssd_u8SendNumber_Mul+0x238>
    1b9c:	90 91 08 01 	lds	r25, 0x0108
    1ba0:	8a a1       	ldd	r24, Y+34	; 0x22
    1ba2:	98 17       	cp	r25, r24
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <ssd_u8SendNumber_Mul+0x3e>
    1ba6:	fd c0       	rjmp	.+506    	; 0x1da2 <ssd_u8SendNumber_Mul+0x238>
	{
		ssd_u8Disable(Copy_u8ComPort,Copy_u8Com2);
    1ba8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1baa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bac:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ssd_u8Disable>
		ssd_u8Enable(Copy_u8ComPort,Copy_u8Com1);
    1bb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bb2:	69 a1       	ldd	r22, Y+33	; 0x21
    1bb4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <ssd_u8Enable>
		ssd_u8SendNumber(Copy_u8Port,Copy_u8Number1);
    1bb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bba:	68 a1       	ldd	r22, Y+32	; 0x20
    1bbc:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ssd_u8SendNumber>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a8 ec       	ldi	r26, 0xC8	; 200
    1bc6:	b2 e4       	ldi	r27, 0x42	; 66
    1bc8:	89 8f       	std	Y+25, r24	; 0x19
    1bca:	9a 8f       	std	Y+26, r25	; 0x1a
    1bcc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a ef       	ldi	r20, 0xFA	; 250
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8d 8b       	std	Y+21, r24	; 0x15
    1bea:	9e 8b       	std	Y+22, r25	; 0x16
    1bec:	af 8b       	std	Y+23, r26	; 0x17
    1bee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <ssd_u8SendNumber_Mul+0xa8>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <ssd_u8SendNumber_Mul+0x126>
	else if (__tmp > 65535)
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <ssd_u8SendNumber_Mul+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9c 8b       	std	Y+20, r25	; 0x14
    1c50:	8b 8b       	std	Y+19, r24	; 0x13
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <ssd_u8SendNumber_Mul+0x108>
    1c54:	88 ec       	ldi	r24, 0xC8	; 200
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c5c:	89 89       	ldd	r24, Y+17	; 0x11
    1c5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <ssd_u8SendNumber_Mul+0xf6>
    1c64:	9a 8b       	std	Y+18, r25	; 0x12
    1c66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <ssd_u8SendNumber_Mul+0xea>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <ssd_u8SendNumber_Mul+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c80:	8f 89       	ldd	r24, Y+23	; 0x17
    1c82:	98 8d       	ldd	r25, Y+24	; 0x18
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
    1c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9a:	98 89       	ldd	r25, Y+16	; 0x10
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <ssd_u8SendNumber_Mul+0x132>
    1ca0:	98 8b       	std	Y+16, r25	; 0x10
    1ca2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		ssd_u8Disable(Copy_u8ComPort,Copy_u8Com1);
    1ca4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ca6:	69 a1       	ldd	r22, Y+33	; 0x21
    1ca8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ssd_u8Disable>
		ssd_u8Enable(Copy_u8ComPort,Copy_u8Com2);
    1cac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cae:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <ssd_u8Enable>
		ssd_u8SendNumber(Copy_u8Port,Copy_u8Number2);
    1cb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cb6:	6a a1       	ldd	r22, Y+34	; 0x22
    1cb8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ssd_u8SendNumber>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 e2       	ldi	r26, 0x20	; 32
    1cc2:	b1 e4       	ldi	r27, 0x41	; 65
    1cc4:	8b 87       	std	Y+11, r24	; 0x0b
    1cc6:	9c 87       	std	Y+12, r25	; 0x0c
    1cc8:	ad 87       	std	Y+13, r26	; 0x0d
    1cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a ef       	ldi	r20, 0xFA	; 250
    1cda:	54 e4       	ldi	r21, 0x44	; 68
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8f 83       	std	Y+7, r24	; 0x07
    1ce6:	98 87       	std	Y+8, r25	; 0x08
    1ce8:	a9 87       	std	Y+9, r26	; 0x09
    1cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <ssd_u8SendNumber_Mul+0x1a4>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <ssd_u8SendNumber_Mul+0x222>
	else if (__tmp > 65535)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	4c f5       	brge	.+82     	; 0x1d78 <ssd_u8SendNumber_Mul+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	0f c0       	rjmp	.+30     	; 0x1d6e <ssd_u8SendNumber_Mul+0x204>
    1d50:	88 ec       	ldi	r24, 0xC8	; 200
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	8b 83       	std	Y+3, r24	; 0x03
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <ssd_u8SendNumber_Mul+0x1f2>
    1d60:	9c 83       	std	Y+4, r25	; 0x04
    1d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <ssd_u8SendNumber_Mul+0x1e6>
    1d76:	17 c0       	rjmp	.+46     	; 0x1da6 <ssd_u8SendNumber_Mul+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7a:	78 85       	ldd	r23, Y+8	; 0x08
    1d7c:	89 85       	ldd	r24, Y+9	; 0x09
    1d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <ssd_u8SendNumber_Mul+0x22e>
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <ssd_u8SendNumber_Mul+0x23c>
		_delay_ms(10);

	}
	else
	{
		Local_u8_ErrorState=1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	return Local_u8_ErrorState;
    1da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1da8:	a3 96       	adiw	r28, 0x23	; 35
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	0f 91       	pop	r16
    1dba:	ef 90       	pop	r14
    1dbc:	08 95       	ret

00001dbe <HLCD_VoidInit>:




void HLCD_VoidInit(void)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	e8 97       	sbiw	r28, 0x38	; 56
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61

	/* set Port direction output */
	DIO_u8SetPortDirection(HLCD_U8_DATA_PORT,DIO_u8_PORT_OUTPUT);
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	6f ef       	ldi	r22, 0xFF	; 255
    1dd6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_u8SetPortDirection>
	/* RS DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_OUTPUT);
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	/* RW DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_OUTPUT);
    1de4:	83 e0       	ldi	r24, 0x03	; 3
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	/* EN DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_OUTPUT);
    1dee:	83 e0       	ldi	r24, 0x03	; 3
    1df0:	62 e0       	ldi	r22, 0x02	; 2
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e2       	ldi	r26, 0x20	; 32
    1dfe:	b2 e4       	ldi	r27, 0x42	; 66
    1e00:	8d ab       	std	Y+53, r24	; 0x35
    1e02:	9e ab       	std	Y+54, r25	; 0x36
    1e04:	af ab       	std	Y+55, r26	; 0x37
    1e06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	89 ab       	std	Y+49, r24	; 0x31
    1e22:	9a ab       	std	Y+50, r25	; 0x32
    1e24:	ab ab       	std	Y+51, r26	; 0x33
    1e26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e28:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <HLCD_VoidInit+0x8c>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	98 ab       	std	Y+48, r25	; 0x30
    1e46:	8f a7       	std	Y+47, r24	; 0x2f
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <HLCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    1e4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e50:	9c a9       	ldd	r25, Y+52	; 0x34
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <HLCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	6d a9       	ldd	r22, Y+53	; 0x35
    1e64:	7e a9       	ldd	r23, Y+54	; 0x36
    1e66:	8f a9       	ldd	r24, Y+55	; 0x37
    1e68:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	98 ab       	std	Y+48, r25	; 0x30
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <HLCD_VoidInit+0xec>
    1e8c:	88 ec       	ldi	r24, 0xC8	; 200
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9e a7       	std	Y+46, r25	; 0x2e
    1e92:	8d a7       	std	Y+45, r24	; 0x2d
    1e94:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e96:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <HLCD_VoidInit+0xda>
    1e9c:	9e a7       	std	Y+46, r25	; 0x2e
    1e9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	98 ab       	std	Y+48, r25	; 0x30
    1ea8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eac:	98 a9       	ldd	r25, Y+48	; 0x30
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <HLCD_VoidInit+0xce>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <HLCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eba:	9c a9       	ldd	r25, Y+52	; 0x34
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	98 ab       	std	Y+48, r25	; 0x30
    1ec6:	8f a7       	std	Y+47, r24	; 0x2f
    1ec8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eca:	98 a9       	ldd	r25, Y+48	; 0x30
    1ecc:	9c a7       	std	Y+44, r25	; 0x2c
    1ece:	8b a7       	std	Y+43, r24	; 0x2b
    1ed0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <HLCD_VoidInit+0x116>
    1ed8:	9c a7       	std	Y+44, r25	; 0x2c
    1eda:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	/* function set 8_bit mode , 2-Line ,font_type 5*7 */
	HLCD_VoidSendCommand(FUNCTIONSET);
    1edc:	88 e3       	ldi	r24, 0x38	; 56
    1ede:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e8       	ldi	r26, 0x80	; 128
    1ee8:	bf e3       	ldi	r27, 0x3F	; 63
    1eea:	8f a3       	std	Y+39, r24	; 0x27
    1eec:	98 a7       	std	Y+40, r25	; 0x28
    1eee:	a9 a7       	std	Y+41, r26	; 0x29
    1ef0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a ef       	ldi	r20, 0xFA	; 250
    1f00:	54 e4       	ldi	r21, 0x44	; 68
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8b a3       	std	Y+35, r24	; 0x23
    1f0c:	9c a3       	std	Y+36, r25	; 0x24
    1f0e:	ad a3       	std	Y+37, r26	; 0x25
    1f10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f12:	6b a1       	ldd	r22, Y+35	; 0x23
    1f14:	7c a1       	ldd	r23, Y+36	; 0x24
    1f16:	8d a1       	ldd	r24, Y+37	; 0x25
    1f18:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <HLCD_VoidInit+0x176>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <HLCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    1f34:	6b a1       	ldd	r22, Y+35	; 0x23
    1f36:	7c a1       	ldd	r23, Y+36	; 0x24
    1f38:	8d a1       	ldd	r24, Y+37	; 0x25
    1f3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	3f ef       	ldi	r19, 0xFF	; 255
    1f40:	4f e7       	ldi	r20, 0x7F	; 127
    1f42:	57 e4       	ldi	r21, 0x47	; 71
    1f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f48:	18 16       	cp	r1, r24
    1f4a:	4c f5       	brge	.+82     	; 0x1f9e <HLCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f50:	89 a5       	ldd	r24, Y+41	; 0x29
    1f52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e2       	ldi	r20, 0x20	; 32
    1f5a:	51 e4       	ldi	r21, 0x41	; 65
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9a a3       	std	Y+34, r25	; 0x22
    1f72:	89 a3       	std	Y+33, r24	; 0x21
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <HLCD_VoidInit+0x1d6>
    1f76:	88 ec       	ldi	r24, 0xC8	; 200
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	98 a3       	std	Y+32, r25	; 0x20
    1f7c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f80:	98 a1       	ldd	r25, Y+32	; 0x20
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <HLCD_VoidInit+0x1c4>
    1f86:	98 a3       	std	Y+32, r25	; 0x20
    1f88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	9a a3       	std	Y+34, r25	; 0x22
    1f92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f94:	89 a1       	ldd	r24, Y+33	; 0x21
    1f96:	9a a1       	ldd	r25, Y+34	; 0x22
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <HLCD_VoidInit+0x1b8>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <HLCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9a a3       	std	Y+34, r25	; 0x22
    1fb0:	89 a3       	std	Y+33, r24	; 0x21
    1fb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb8:	8d 8f       	std	Y+29, r24	; 0x1d
    1fba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <HLCD_VoidInit+0x200>
    1fc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Display on/off control*/
	HLCD_VoidSendCommand(DISPLAYON);
    1fc6:	8f e0       	ldi	r24, 0x0F	; 15
    1fc8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	89 8f       	std	Y+25, r24	; 0x19
    1fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8d 8b       	std	Y+21, r24	; 0x15
    1ff6:	9e 8b       	std	Y+22, r25	; 0x16
    1ff8:	af 8b       	std	Y+23, r26	; 0x17
    1ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <HLCD_VoidInit+0x260>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	3f c0       	rjmp	.+126    	; 0x209c <HLCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <HLCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	0f c0       	rjmp	.+30     	; 0x207e <HLCD_VoidInit+0x2c0>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
    2068:	89 89       	ldd	r24, Y+17	; 0x11
    206a:	9a 89       	ldd	r25, Y+18	; 0x12
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <HLCD_VoidInit+0x2ae>
    2070:	9a 8b       	std	Y+18, r25	; 0x12
    2072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <HLCD_VoidInit+0x2a2>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <HLCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9c 8b       	std	Y+20, r25	; 0x14
    209a:	8b 8b       	std	Y+19, r24	; 0x13
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	98 89       	ldd	r25, Y+16	; 0x10
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <HLCD_VoidInit+0x2ea>
    20ac:	98 8b       	std	Y+16, r25	; 0x10
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* display Clear*/
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a0 e0       	ldi	r26, 0x00	; 0
    20bc:	b0 e4       	ldi	r27, 0x40	; 64
    20be:	8b 87       	std	Y+11, r24	; 0x0b
    20c0:	9c 87       	std	Y+12, r25	; 0x0c
    20c2:	ad 87       	std	Y+13, r26	; 0x0d
    20c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a ef       	ldi	r20, 0xFA	; 250
    20d4:	54 e4       	ldi	r21, 0x44	; 68
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8f 83       	std	Y+7, r24	; 0x07
    20e0:	98 87       	std	Y+8, r25	; 0x08
    20e2:	a9 87       	std	Y+9, r26	; 0x09
    20e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <HLCD_VoidInit+0x34a>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <HLCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    2108:	6f 81       	ldd	r22, Y+7	; 0x07
    210a:	78 85       	ldd	r23, Y+8	; 0x08
    210c:	89 85       	ldd	r24, Y+9	; 0x09
    210e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <HLCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6b 85       	ldd	r22, Y+11	; 0x0b
    2122:	7c 85       	ldd	r23, Y+12	; 0x0c
    2124:	8d 85       	ldd	r24, Y+13	; 0x0d
    2126:	9e 85       	ldd	r25, Y+14	; 0x0e
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <HLCD_VoidInit+0x3aa>
    214a:	88 ec       	ldi	r24, 0xC8	; 200
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <HLCD_VoidInit+0x398>
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <HLCD_VoidInit+0x38c>
    2170:	14 c0       	rjmp	.+40     	; 0x219a <HLCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <HLCD_VoidInit+0x3d4>
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* return to home*/
	HLCD_VoidSendCommand(0b00000010);
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
}
    21a0:	e8 96       	adiw	r28, 0x38	; 56
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <HLCD_VoidSendChar>:


void HLCD_VoidSendChar(u8 copy_u8char)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	6d 97       	sbiw	r28, 0x1d	; 29
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_HIGH);
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    21d2:	83 e0       	ldi	r24, 0x03	; 3
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>

	/*     Data   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8char);
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21e0:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    21e4:	83 e0       	ldi	r24, 0x03	; 3
    21e6:	62 e0       	ldi	r22, 0x02	; 2
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e0       	ldi	r26, 0x00	; 0
    21f4:	b0 e4       	ldi	r27, 0x40	; 64
    21f6:	89 8f       	std	Y+25, r24	; 0x19
    21f8:	9a 8f       	std	Y+26, r25	; 0x1a
    21fa:	ab 8f       	std	Y+27, r26	; 0x1b
    21fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a ef       	ldi	r20, 0xFA	; 250
    220c:	54 e4       	ldi	r21, 0x44	; 68
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8d 8b       	std	Y+21, r24	; 0x15
    2218:	9e 8b       	std	Y+22, r25	; 0x16
    221a:	af 8b       	std	Y+23, r26	; 0x17
    221c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    221e:	6d 89       	ldd	r22, Y+21	; 0x15
    2220:	7e 89       	ldd	r23, Y+22	; 0x16
    2222:	8f 89       	ldd	r24, Y+23	; 0x17
    2224:	98 8d       	ldd	r25, Y+24	; 0x18
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	2c f4       	brge	.+10     	; 0x2240 <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	3f c0       	rjmp	.+126    	; 0x22be <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	4c f5       	brge	.+82     	; 0x22aa <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	69 8d       	ldd	r22, Y+25	; 0x19
    225a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9c 8b       	std	Y+20, r25	; 0x14
    227e:	8b 8b       	std	Y+19, r24	; 0x13
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <HLCD_VoidSendChar+0xee>
    2282:	88 ec       	ldi	r24, 0xC8	; 200
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9a 8b       	std	Y+18, r25	; 0x12
    2288:	89 8b       	std	Y+17, r24	; 0x11
    228a:	89 89       	ldd	r24, Y+17	; 0x11
    228c:	9a 89       	ldd	r25, Y+18	; 0x12
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <HLCD_VoidSendChar+0xdc>
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	8b 89       	ldd	r24, Y+19	; 0x13
    2298:	9c 89       	ldd	r25, Y+20	; 0x14
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9c 8b       	std	Y+20, r25	; 0x14
    229e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	8b 89       	ldd	r24, Y+19	; 0x13
    22a2:	9c 89       	ldd	r25, Y+20	; 0x14
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	69 f7       	brne	.-38     	; 0x2282 <HLCD_VoidSendChar+0xd0>
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	6d 89       	ldd	r22, Y+21	; 0x15
    22ac:	7e 89       	ldd	r23, Y+22	; 0x16
    22ae:	8f 89       	ldd	r24, Y+23	; 0x17
    22b0:	98 8d       	ldd	r25, Y+24	; 0x18
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	98 8b       	std	Y+16, r25	; 0x10
    22c4:	8f 87       	std	Y+15, r24	; 0x0f
    22c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c8:	98 89       	ldd	r25, Y+16	; 0x10
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <HLCD_VoidSendChar+0x118>
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
	/*       delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	62 e0       	ldi	r22, 0x02	; 2
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e4       	ldi	r27, 0x40	; 64
    22e4:	8b 87       	std	Y+11, r24	; 0x0b
    22e6:	9c 87       	std	Y+12, r25	; 0x0c
    22e8:	ad 87       	std	Y+13, r26	; 0x0d
    22ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a ef       	ldi	r20, 0xFA	; 250
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	8f 83       	std	Y+7, r24	; 0x07
    2306:	98 87       	std	Y+8, r25	; 0x08
    2308:	a9 87       	std	Y+9, r26	; 0x09
    230a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e8       	ldi	r20, 0x80	; 128
    231a:	5f e3       	ldi	r21, 0x3F	; 63
    231c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2320:	88 23       	and	r24, r24
    2322:	2c f4       	brge	.+10     	; 0x232e <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	57 e4       	ldi	r21, 0x47	; 71
    233e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	4c f5       	brge	.+82     	; 0x2398 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2346:	6b 85       	ldd	r22, Y+11	; 0x0b
    2348:	7c 85       	ldd	r23, Y+12	; 0x0c
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	9e 85       	ldd	r25, Y+14	; 0x0e
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	0f c0       	rjmp	.+30     	; 0x238e <HLCD_VoidSendChar+0x1dc>
    2370:	88 ec       	ldi	r24, 0xC8	; 200
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9c 83       	std	Y+4, r25	; 0x04
    2376:	8b 83       	std	Y+3, r24	; 0x03
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <HLCD_VoidSendChar+0x1ca>
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	69 f7       	brne	.-38     	; 0x2370 <HLCD_VoidSendChar+0x1be>
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <HLCD_VoidSendChar+0x206>
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
	/*       delay 2ms  */
	_delay_ms(2);

}
    23c0:	6d 96       	adiw	r28, 0x1d	; 29
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <HLCD_VoidSendCommand>:



void HLCD_VoidSendCommand(u8 copy_u8command)

{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	6d 97       	sbiw	r28, 0x1d	; 29
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_LOW);
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>

	/*     Command   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8command);
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2400:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    2404:	83 e0       	ldi	r24, 0x03	; 3
    2406:	62 e0       	ldi	r22, 0x02	; 2
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	b0 e4       	ldi	r27, 0x40	; 64
    2416:	89 8f       	std	Y+25, r24	; 0x19
    2418:	9a 8f       	std	Y+26, r25	; 0x1a
    241a:	ab 8f       	std	Y+27, r26	; 0x1b
    241c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	69 8d       	ldd	r22, Y+25	; 0x19
    2420:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2422:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2424:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a ef       	ldi	r20, 0xFA	; 250
    242c:	54 e4       	ldi	r21, 0x44	; 68
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8d 8b       	std	Y+21, r24	; 0x15
    2438:	9e 8b       	std	Y+22, r25	; 0x16
    243a:	af 8b       	std	Y+23, r26	; 0x17
    243c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	3f c0       	rjmp	.+126    	; 0x24de <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    2460:	6d 89       	ldd	r22, Y+21	; 0x15
    2462:	7e 89       	ldd	r23, Y+22	; 0x16
    2464:	8f 89       	ldd	r24, Y+23	; 0x17
    2466:	98 8d       	ldd	r25, Y+24	; 0x18
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	69 8d       	ldd	r22, Y+25	; 0x19
    247a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9c 8b       	std	Y+20, r25	; 0x14
    249e:	8b 8b       	std	Y+19, r24	; 0x13
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <HLCD_VoidSendCommand+0xee>
    24a2:	88 ec       	ldi	r24, 0xC8	; 200
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9a 8b       	std	Y+18, r25	; 0x12
    24a8:	89 8b       	std	Y+17, r24	; 0x11
    24aa:	89 89       	ldd	r24, Y+17	; 0x11
    24ac:	9a 89       	ldd	r25, Y+18	; 0x12
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <HLCD_VoidSendCommand+0xdc>
    24b2:	9a 8b       	std	Y+18, r25	; 0x12
    24b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	8b 89       	ldd	r24, Y+19	; 0x13
    24b8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9c 8b       	std	Y+20, r25	; 0x14
    24be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <HLCD_VoidSendCommand+0xd0>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9c 8b       	std	Y+20, r25	; 0x14
    24dc:	8b 8b       	std	Y+19, r24	; 0x13
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	98 8b       	std	Y+16, r25	; 0x10
    24e4:	8f 87       	std	Y+15, r24	; 0x0f
    24e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e8:	98 89       	ldd	r25, Y+16	; 0x10
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <HLCD_VoidSendCommand+0x118>
    24ee:	98 8b       	std	Y+16, r25	; 0x10
    24f0:	8f 87       	std	Y+15, r24	; 0x0f
	/*     delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	62 e0       	ldi	r22, 0x02	; 2
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 e0       	ldi	r26, 0x00	; 0
    2502:	b0 e4       	ldi	r27, 0x40	; 64
    2504:	8b 87       	std	Y+11, r24	; 0x0b
    2506:	9c 87       	std	Y+12, r25	; 0x0c
    2508:	ad 87       	std	Y+13, r26	; 0x0d
    250a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	6b 85       	ldd	r22, Y+11	; 0x0b
    250e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2510:	8d 85       	ldd	r24, Y+13	; 0x0d
    2512:	9e 85       	ldd	r25, Y+14	; 0x0e
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a ef       	ldi	r20, 0xFA	; 250
    251a:	54 e4       	ldi	r21, 0x44	; 68
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	8f 83       	std	Y+7, r24	; 0x07
    2526:	98 87       	std	Y+8, r25	; 0x08
    2528:	a9 87       	std	Y+9, r26	; 0x09
    252a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2540:	88 23       	and	r24, r24
    2542:	2c f4       	brge	.+10     	; 0x254e <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	3f c0       	rjmp	.+126    	; 0x25cc <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2562:	18 16       	cp	r1, r24
    2564:	4c f5       	brge	.+82     	; 0x25b8 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	6b 85       	ldd	r22, Y+11	; 0x0b
    2568:	7c 85       	ldd	r23, Y+12	; 0x0c
    256a:	8d 85       	ldd	r24, Y+13	; 0x0d
    256c:	9e 85       	ldd	r25, Y+14	; 0x0e
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <HLCD_VoidSendCommand+0x1dc>
    2590:	88 ec       	ldi	r24, 0xC8	; 200
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9c 83       	std	Y+4, r25	; 0x04
    2596:	8b 83       	std	Y+3, r24	; 0x03
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <HLCD_VoidSendCommand+0x1ca>
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <HLCD_VoidSendCommand+0x1be>
    25b6:	14 c0       	rjmp	.+40     	; 0x25e0 <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9e 83       	std	Y+6, r25	; 0x06
    25ca:	8d 83       	std	Y+5, r24	; 0x05
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <HLCD_VoidSendCommand+0x206>
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
	/*     delay 2ms  */
	_delay_ms(2);

}
    25e0:	6d 96       	adiw	r28, 0x1d	; 29
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <HLCD_VoidSendString>:


void HLCD_VoidSendString(u8 copy_u8Char[])
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <HLCD_VoidSendString+0x6>
    25f8:	0f 92       	push	r0
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	9b 83       	std	Y+3, r25	; 0x03
    2600:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2602:	19 82       	std	Y+1, r1	; 0x01
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <HLCD_VoidSendString+0x30>
	while(copy_u8Char[i]!='\0')
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	9b 81       	ldd	r25, Y+3	; 0x03
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HLCD_VoidSendChar>
		i++;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	89 83       	std	Y+1, r24	; 0x01


void HLCD_VoidSendString(u8 copy_u8Char[])
{
	u8 i=0;
	while(copy_u8Char[i]!='\0')
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	fc 01       	movw	r30, r24
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	80 81       	ld	r24, Z
    2634:	88 23       	and	r24, r24
    2636:	39 f7       	brne	.-50     	; 0x2606 <HLCD_VoidSendString+0x14>
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
		i++;
	}
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <HLCD_VoidSendNumber>:



void HLCD_VoidSendNumber(u32 copy_u8Char)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <HLCD_VoidSendNumber+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <HLCD_VoidSendNumber+0x8>
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
	u32  Local_u8_revers_number = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8Char == 0)
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	9c 81       	ldd	r25, Y+4	; 0x04
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	39 f5       	brne	.+78     	; 0x26b2 <HLCD_VoidSendNumber+0x6e>
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	80 5d       	subi	r24, 0xD0	; 208
    2668:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HLCD_VoidSendChar>
    266c:	22 c0       	rjmp	.+68     	; 0x26b2 <HLCD_VoidSendNumber+0x6e>
	}

	while(copy_u8Char > 0)
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	9a 81       	ldd	r25, Y+2	; 0x02
    2672:	9c 01       	movw	r18, r24
    2674:	22 0f       	add	r18, r18
    2676:	33 1f       	adc	r19, r19
    2678:	c9 01       	movw	r24, r18
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	f9 01       	movw	r30, r18
    2684:	e8 0f       	add	r30, r24
    2686:	f9 1f       	adc	r31, r25
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	2a e0       	ldi	r18, 0x0A	; 10
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	b9 01       	movw	r22, r18
    2692:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__udivmodhi4>
    2696:	8e 0f       	add	r24, r30
    2698:	9f 1f       	adc	r25, r31
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
		copy_u8Char=copy_u8Char/10;
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	2a e0       	ldi	r18, 0x0A	; 10
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	b9 01       	movw	r22, r18
    26a8:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__udivmodhi4>
    26ac:	cb 01       	movw	r24, r22
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
	if(copy_u8Char == 0)
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
	}

	while(copy_u8Char > 0)
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	d1 f6       	brne	.-76     	; 0x266e <HLCD_VoidSendNumber+0x2a>
    26ba:	17 c0       	rjmp	.+46     	; 0x26ea <HLCD_VoidSendNumber+0xa6>
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
	{
		copy_u8Char=Local_u8_revers_number % 10;
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	2a e0       	ldi	r18, 0x0A	; 10
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	b9 01       	movw	r22, r18
    26c6:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__udivmodhi4>
    26ca:	9c 83       	std	Y+4, r25	; 0x04
    26cc:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8_revers_number=Local_u8_revers_number/10;
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	2a e0       	ldi	r18, 0x0A	; 10
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	b9 01       	movw	r22, r18
    26d8:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__udivmodhi4>
    26dc:	cb 01       	movw	r24, r22
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
		HLCD_VoidSendChar(copy_u8Char+'0');
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	80 5d       	subi	r24, 0xD0	; 208
    26e6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HLCD_VoidSendChar>
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	82 30       	cpi	r24, 0x02	; 2
    26f0:	91 05       	cpc	r25, r1
    26f2:	20 f7       	brcc	.-56     	; 0x26bc <HLCD_VoidSendNumber+0x78>

	}



}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <HLCD_VoidGotoXY>:




void HLCD_VoidGotoXY(u8 copy_U8RowPos ,u8 copy_U8ColPos)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	00 d0       	rcall	.+0      	; 0x2708 <HLCD_VoidGotoXY+0x6>
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_U8RowPos ==0)
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	88 23       	and	r24, r24
    2714:	29 f4       	brne	.+10     	; 0x2720 <HLCD_VoidGotoXY+0x1e>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128);
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	80 58       	subi	r24, 0x80	; 128
    271a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
    271e:	07 c0       	rjmp	.+14     	; 0x272e <HLCD_VoidGotoXY+0x2c>

	}
	else if(copy_U8RowPos ==1)
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	21 f4       	brne	.+8      	; 0x272e <HLCD_VoidGotoXY+0x2c>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128+64);
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	80 54       	subi	r24, 0x40	; 64
    272a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>

	}

}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <HLCD_VoidDraw>:




void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <HLCD_VoidDraw+0x6>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <HLCD_VoidDraw+0x8>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <HLCD_VoidDraw+0xa>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	9b 83       	std	Y+3, r25	; 0x03
    2748:	8a 83       	std	Y+2, r24	; 0x02
    274a:	6c 83       	std	Y+4, r22	; 0x04
    274c:	4d 83       	std	Y+5, r20	; 0x05
    274e:	2e 83       	std	Y+6, r18	; 0x06
	u8 i=0;
    2750:	19 82       	std	Y+1, r1	; 0x01
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
    2752:	8c 81       	ldd	r24, Y+4	; 0x04
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	08 96       	adiw	r24, 0x08	; 8
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
	for(i=0;i<8;i++)
    276a:	19 82       	std	Y+1, r1	; 0x01
    276c:	0e c0       	rjmp	.+28     	; 0x278a <HLCD_VoidDraw+0x52>
	{
		HLCD_VoidSendChar(copy_u8char[i]);
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	fc 01       	movw	r30, r24
    277a:	e2 0f       	add	r30, r18
    277c:	f3 1f       	adc	r31, r19
    277e:	80 81       	ld	r24, Z
    2780:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HLCD_VoidSendChar>

void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
	u8 i=0;
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
	for(i=0;i<8;i++)
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	8f 5f       	subi	r24, 0xFF	; 255
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	88 30       	cpi	r24, 0x08	; 8
    278e:	78 f3       	brcs	.-34     	; 0x276e <HLCD_VoidDraw+0x36>
	{
		HLCD_VoidSendChar(copy_u8char[i]);

	}
	HLCD_VoidSendCommand(0b10000000);//address 0 of DD_Ram
    2790:	80 e8       	ldi	r24, 0x80	; 128
    2792:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
	HLCD_VoidGotoXY(copy_u8Xpos,copy_u8Ypos);
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	6e 81       	ldd	r22, Y+6	; 0x06
    279a:	0e 94 81 13 	call	0x2702	; 0x2702 <HLCD_VoidGotoXY>
	HLCD_VoidSendChar(copy_u8Location); //address location 0 of CG_Ram
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HLCD_VoidSendChar>

}
    27a4:	26 96       	adiw	r28, 0x06	; 6
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <KPD_u8GetPressedKey>:
#include "KPD_Interface.h"
#include "KPD_Config.h"
#include "KPD_Private.h"

u8 KPD_u8GetPressedKey(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <KPD_u8GetPressedKey+0x6>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <KPD_u8GetPressedKey+0x8>
    27be:	0f 92       	push	r0
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIndex,Local_u8RowIndex;
	u8 Local_u8PinSate;

	DIO_u8SetPinDirection(KPD_PORT,KPD_COL0_PIN,DIO_u8_PIN_OUTPUT);
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	41 e0       	ldi	r20, 0x01	; 1
    27ce:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL1_PIN,DIO_u8_PIN_OUTPUT);
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	61 e0       	ldi	r22, 0x01	; 1
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL2_PIN,DIO_u8_PIN_OUTPUT);
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	62 e0       	ldi	r22, 0x02	; 2
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL3_PIN,DIO_u8_PIN_OUTPUT);
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	63 e0       	ldi	r22, 0x03	; 3
    27ea:	41 e0       	ldi	r20, 0x01	; 1
    27ec:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(KPD_PORT,KPD_COL0_PIN,DIO_u8_PIN_HIGH);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	41 e0       	ldi	r20, 0x01	; 1
    27f6:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL1_PIN,DIO_u8_PIN_HIGH);
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL2_PIN,DIO_u8_PIN_HIGH);
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	62 e0       	ldi	r22, 0x02	; 2
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL3_PIN,DIO_u8_PIN_HIGH);
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	63 e0       	ldi	r22, 0x03	; 3
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8_PIN_LOW);
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	64 e0       	ldi	r22, 0x04	; 4
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8_PIN_LOW);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	65 e0       	ldi	r22, 0x05	; 5
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8_PIN_LOW);
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	66 e0       	ldi	r22, 0x06	; 6
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8_PIN_LOW);
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	67 e0       	ldi	r22, 0x07	; 7
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>

	/*Activate Pull up */
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW0_PIN,DIO_u8_PIN_HIGH);
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	64 e0       	ldi	r22, 0x04	; 4
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW1_PIN,DIO_u8_PIN_HIGH);
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	65 e0       	ldi	r22, 0x05	; 5
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW2_PIN,DIO_u8_PIN_HIGH);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	66 e0       	ldi	r22, 0x06	; 6
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW3_PIN,DIO_u8_PIN_HIGH);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	67 e0       	ldi	r22, 0x07	; 7
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>

	static u8 Local_u8KPDColArr[COLUMN_NUM]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};

	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
    2868:	1a 82       	std	Y+2, r1	; 0x02
    286a:	5e c0       	rjmp	.+188    	; 0x2928 <KPD_u8GetPressedKey+0x172>
	{
		/*Activate Current Column*/

		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_LOW);
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	fc 01       	movw	r30, r24
    2874:	e3 5f       	subi	r30, 0xF3	; 243
    2876:	fe 4f       	sbci	r31, 0xFE	; 254
    2878:	90 81       	ld	r25, Z
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	69 2f       	mov	r22, r25
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    2884:	19 82       	std	Y+1, r1	; 0x01
    2886:	3d c0       	rjmp	.+122    	; 0x2902 <KPD_u8GetPressedKey+0x14c>
		{

			/*Read the current Row*/

			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	88 2f       	mov	r24, r24
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	fc 01       	movw	r30, r24
    2890:	e7 5f       	subi	r30, 0xF7	; 247
    2892:	fe 4f       	sbci	r31, 0xFE	; 254
    2894:	90 81       	ld	r25, Z
    2896:	9e 01       	movw	r18, r28
    2898:	2c 5f       	subi	r18, 0xFC	; 252
    289a:	3f 4f       	sbci	r19, 0xFF	; 255
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	69 2f       	mov	r22, r25
    28a0:	a9 01       	movw	r20, r18
    28a2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_u8GetPinValue>


			/*Check if switch is Pressed*/
			if(DIO_u8_PIN_LOW==Local_u8PinSate)
    28a6:	8c 81       	ldd	r24, Y+4	; 0x04
    28a8:	88 23       	and	r24, r24
    28aa:	41 f5       	brne	.+80     	; 0x28fc <KPD_u8GetPressedKey+0x146>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	48 2f       	mov	r20, r24
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	ca 01       	movw	r24, r20
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	fc 01       	movw	r30, r24
    28c8:	ef 5e       	subi	r30, 0xEF	; 239
    28ca:	fe 4f       	sbci	r31, 0xFE	; 254
    28cc:	80 81       	ld	r24, Z
    28ce:	8b 83       	std	Y+3, r24	; 0x03
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <KPD_u8GetPressedKey+0x13a>
				/*Polling (busy waiting )until the key is released*/
				while(DIO_u8_PIN_LOW==Local_u8PinSate)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	fc 01       	movw	r30, r24
    28da:	e7 5f       	subi	r30, 0xF7	; 247
    28dc:	fe 4f       	sbci	r31, 0xFE	; 254
    28de:	90 81       	ld	r25, Z
    28e0:	9e 01       	movw	r18, r28
    28e2:	2c 5f       	subi	r18, 0xFC	; 252
    28e4:	3f 4f       	sbci	r19, 0xFF	; 255
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	69 2f       	mov	r22, r25
    28ea:	a9 01       	movw	r20, r18
    28ec:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_u8GetPinValue>
			/*Check if switch is Pressed*/
			if(DIO_u8_PIN_LOW==Local_u8PinSate)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				/*Polling (busy waiting )until the key is released*/
				while(DIO_u8_PIN_LOW==Local_u8PinSate)
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	88 23       	and	r24, r24
    28f4:	71 f3       	breq	.-36     	; 0x28d2 <KPD_u8GetPressedKey+0x11c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
				}
				return  Local_u8PressedKey;
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	1c c0       	rjmp	.+56     	; 0x2934 <KPD_u8GetPressedKey+0x17e>
	{
		/*Activate Current Column*/

		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	84 30       	cpi	r24, 0x04	; 4
    2906:	08 f4       	brcc	.+2      	; 0x290a <KPD_u8GetPressedKey+0x154>
    2908:	bf cf       	rjmp	.-130    	; 0x2888 <KPD_u8GetPressedKey+0xd2>
				}
				return  Local_u8PressedKey;
			}
		}
		/*DeActivate the Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_HIGH);
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	fc 01       	movw	r30, r24
    2912:	e3 5f       	subi	r30, 0xF3	; 243
    2914:	fe 4f       	sbci	r31, 0xFE	; 254
    2916:	90 81       	ld	r25, Z
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	69 2f       	mov	r22, r25
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>

	static u8 Local_u8KPDColArr[COLUMN_NUM]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};

	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	8f 5f       	subi	r24, 0xFF	; 255
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	84 30       	cpi	r24, 0x04	; 4
    292c:	08 f4       	brcc	.+2      	; 0x2930 <KPD_u8GetPressedKey+0x17a>
    292e:	9e cf       	rjmp	.-196    	; 0x286c <KPD_u8GetPressedKey+0xb6>
		}
		/*DeActivate the Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_HIGH);
	}

	return Local_u8PressedKey;
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	8d 83       	std	Y+5, r24	; 0x05
    2934:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <main>:
u16 ADC_Result;
volatile u8 temp=0;
volatile u32 volt, digital;

void main (void)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	ee 97       	sbiw	r28, 0x3e	; 62
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key=0;
    295a:	1e ae       	std	Y+62, r1	; 0x3e
	u8 Password=0;
    295c:	1d ae       	std	Y+61, r1	; 0x3d
	u8 Flag_star=0;
    295e:	1c ae       	std	Y+60, r1	; 0x3c
	u8 LCD_Flag =0;
    2960:	1b ae       	std	Y+59, r1	; 0x3b
	u8 number_of_tries=0;
    2962:	1a ae       	std	Y+58, r1	; 0x3a
	u8 check_flag=0;
    2964:	19 ae       	std	Y+57, r1	; 0x39

	ADC_voidInit();
    2966:	0e 94 b3 0b 	call	0x1766	; 0x1766 <ADC_voidInit>
	GIE_voidEnable();
    296a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_voidEnable>
	HLCD_VoidInit();
    296e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <HLCD_VoidInit>

	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_INPUT);
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_LOW);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_PIN_OUTPUT);
    2986:	83 e0       	ldi	r24, 0x03	; 3
    2988:	65 e0       	ldi	r22, 0x05	; 5
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_PIN_OUTPUT);
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	66 e0       	ldi	r22, 0x06	; 6
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 67 08 	call	0x10ce	; 0x10ce <DIO_u8SetPinDirection>
	HLCD_VoidSendString("Welcome Back");
    299a:	80 e6       	ldi	r24, 0x60	; 96
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	aa e7       	ldi	r26, 0x7A	; 122
    29a8:	b4 e4       	ldi	r27, 0x44	; 68
    29aa:	8d ab       	std	Y+53, r24	; 0x35
    29ac:	9e ab       	std	Y+54, r25	; 0x36
    29ae:	af ab       	std	Y+55, r26	; 0x37
    29b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	6d a9       	ldd	r22, Y+53	; 0x35
    29b4:	7e a9       	ldd	r23, Y+54	; 0x36
    29b6:	8f a9       	ldd	r24, Y+55	; 0x37
    29b8:	98 ad       	ldd	r25, Y+56	; 0x38
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a ef       	ldi	r20, 0xFA	; 250
    29c0:	54 e4       	ldi	r21, 0x44	; 68
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	89 ab       	std	Y+49, r24	; 0x31
    29cc:	9a ab       	std	Y+50, r25	; 0x32
    29ce:	ab ab       	std	Y+51, r26	; 0x33
    29d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29d2:	69 a9       	ldd	r22, Y+49	; 0x31
    29d4:	7a a9       	ldd	r23, Y+50	; 0x32
    29d6:	8b a9       	ldd	r24, Y+51	; 0x33
    29d8:	9c a9       	ldd	r25, Y+52	; 0x34
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f4       	brge	.+10     	; 0x29f4 <main+0xae>
		__ticks = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	98 ab       	std	Y+48, r25	; 0x30
    29f0:	8f a7       	std	Y+47, r24	; 0x2f
    29f2:	3f c0       	rjmp	.+126    	; 0x2a72 <main+0x12c>
	else if (__tmp > 65535)
    29f4:	69 a9       	ldd	r22, Y+49	; 0x31
    29f6:	7a a9       	ldd	r23, Y+50	; 0x32
    29f8:	8b a9       	ldd	r24, Y+51	; 0x33
    29fa:	9c a9       	ldd	r25, Y+52	; 0x34
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	4c f5       	brge	.+82     	; 0x2a5e <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a10:	8f a9       	ldd	r24, Y+55	; 0x37
    2a12:	98 ad       	ldd	r25, Y+56	; 0x38
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	98 ab       	std	Y+48, r25	; 0x30
    2a32:	8f a7       	std	Y+47, r24	; 0x2f
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <main+0x10e>
    2a36:	88 ec       	ldi	r24, 0xC8	; 200
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9e a7       	std	Y+46, r25	; 0x2e
    2a3c:	8d a7       	std	Y+45, r24	; 0x2d
    2a3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a40:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <main+0xfc>
    2a46:	9e a7       	std	Y+46, r25	; 0x2e
    2a48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	98 ab       	std	Y+48, r25	; 0x30
    2a52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a56:	98 a9       	ldd	r25, Y+48	; 0x30
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <main+0xf0>
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <main+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a60:	7a a9       	ldd	r23, Y+50	; 0x32
    2a62:	8b a9       	ldd	r24, Y+51	; 0x33
    2a64:	9c a9       	ldd	r25, Y+52	; 0x34
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	98 ab       	std	Y+48, r25	; 0x30
    2a70:	8f a7       	std	Y+47, r24	; 0x2f
    2a72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a74:	98 a9       	ldd	r25, Y+48	; 0x30
    2a76:	9c a7       	std	Y+44, r25	; 0x2c
    2a78:	8b a7       	std	Y+43, r24	; 0x2b
    2a7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <main+0x138>
    2a82:	9c a7       	std	Y+44, r25	; 0x2c
    2a84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>

	HLCD_VoidSendString("Enter Password");
    2a8c:	8d e6       	ldi	r24, 0x6D	; 109
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	aa e7       	ldi	r26, 0x7A	; 122
    2a9a:	b4 e4       	ldi	r27, 0x44	; 68
    2a9c:	8f a3       	std	Y+39, r24	; 0x27
    2a9e:	98 a7       	std	Y+40, r25	; 0x28
    2aa0:	a9 a7       	std	Y+41, r26	; 0x29
    2aa2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4a ef       	ldi	r20, 0xFA	; 250
    2ab2:	54 e4       	ldi	r21, 0x44	; 68
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	8b a3       	std	Y+35, r24	; 0x23
    2abe:	9c a3       	std	Y+36, r25	; 0x24
    2ac0:	ad a3       	std	Y+37, r26	; 0x25
    2ac2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aca:	9e a1       	ldd	r25, Y+38	; 0x26
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	2c f4       	brge	.+10     	; 0x2ae6 <main+0x1a0>
		__ticks = 1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9a a3       	std	Y+34, r25	; 0x22
    2ae2:	89 a3       	std	Y+33, r24	; 0x21
    2ae4:	3f c0       	rjmp	.+126    	; 0x2b64 <main+0x21e>
	else if (__tmp > 65535)
    2ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    2aea:	8d a1       	ldd	r24, Y+37	; 0x25
    2aec:	9e a1       	ldd	r25, Y+38	; 0x26
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	3f ef       	ldi	r19, 0xFF	; 255
    2af2:	4f e7       	ldi	r20, 0x7F	; 127
    2af4:	57 e4       	ldi	r21, 0x47	; 71
    2af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2afa:	18 16       	cp	r1, r24
    2afc:	4c f5       	brge	.+82     	; 0x2b50 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afe:	6f a1       	ldd	r22, Y+39	; 0x27
    2b00:	78 a5       	ldd	r23, Y+40	; 0x28
    2b02:	89 a5       	ldd	r24, Y+41	; 0x29
    2b04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9a a3       	std	Y+34, r25	; 0x22
    2b24:	89 a3       	std	Y+33, r24	; 0x21
    2b26:	0f c0       	rjmp	.+30     	; 0x2b46 <main+0x200>
    2b28:	88 ec       	ldi	r24, 0xC8	; 200
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	98 a3       	std	Y+32, r25	; 0x20
    2b2e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b32:	98 a1       	ldd	r25, Y+32	; 0x20
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <main+0x1ee>
    2b38:	98 a3       	std	Y+32, r25	; 0x20
    2b3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	9a a3       	std	Y+34, r25	; 0x22
    2b44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b46:	89 a1       	ldd	r24, Y+33	; 0x21
    2b48:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	69 f7       	brne	.-38     	; 0x2b28 <main+0x1e2>
    2b4e:	14 c0       	rjmp	.+40     	; 0x2b78 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b50:	6b a1       	ldd	r22, Y+35	; 0x23
    2b52:	7c a1       	ldd	r23, Y+36	; 0x24
    2b54:	8d a1       	ldd	r24, Y+37	; 0x25
    2b56:	9e a1       	ldd	r25, Y+38	; 0x26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9a a3       	std	Y+34, r25	; 0x22
    2b62:	89 a3       	std	Y+33, r24	; 0x21
    2b64:	89 a1       	ldd	r24, Y+33	; 0x21
    2b66:	9a a1       	ldd	r25, Y+34	; 0x22
    2b68:	9e 8f       	std	Y+30, r25	; 0x1e
    2b6a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <main+0x22a>
    2b74:	9e 8f       	std	Y+30, r25	; 0x1e
    2b76:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
    2b7e:	1f c0       	rjmp	.+62     	; 0x2bbe <main+0x278>

	while(Local_u8Key !='=')
	{
		Password = Password*10+Local_u8Key;
    2b80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9c 01       	movw	r18, r24
    2b88:	22 0f       	add	r18, r18
    2b8a:	33 1f       	adc	r19, r19
    2b8c:	c9 01       	movw	r24, r18
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	82 0f       	add	r24, r18
    2b98:	93 1f       	adc	r25, r19
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b9e:	89 0f       	add	r24, r25
    2ba0:	8d af       	std	Y+61, r24	; 0x3d
		if(Flag_star!=0)
    2ba2:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ba4:	88 23       	and	r24, r24
    2ba6:	19 f0       	breq	.+6      	; 0x2bae <main+0x268>
		{
			HLCD_VoidSendChar('*');
    2ba8:	8a e2       	ldi	r24, 0x2A	; 42
    2baa:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HLCD_VoidSendChar>
		}
		do
		{
			Local_u8Key=KPD_u8GetPressedKey();
    2bae:	0e 94 db 13 	call	0x27b6	; 0x27b6 <KPD_u8GetPressedKey>
    2bb2:	8e af       	std	Y+62, r24	; 0x3e
			Flag_star=1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	8c af       	std	Y+60, r24	; 0x3c
		}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    2bb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bba:	8f 3f       	cpi	r24, 0xFF	; 255
    2bbc:	c1 f3       	breq	.-16     	; 0x2bae <main+0x268>

	HLCD_VoidSendString("Enter Password");
	_delay_ms(1000);
	HLCD_VoidSendCommand(DISPLAYCLEAR);

	while(Local_u8Key !='=')
    2bbe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bc0:	8d 33       	cpi	r24, 0x3D	; 61
    2bc2:	f1 f6       	brne	.-68     	; 0x2b80 <main+0x23a>

	}

	while(1)
	{
		if(Password == 123)
    2bc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bc6:	8b 37       	cpi	r24, 0x7B	; 123
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <main+0x286>
    2bca:	76 c0       	rjmp	.+236    	; 0x2cb8 <main+0x372>
		{
			if(check_flag=0)
    2bcc:	19 ae       	std	Y+57, r1	; 0x39
				HLCD_VoidSendString("Welcome Ahmed ");
				_delay_ms(1000);
				HLCD_VoidSendCommand(DISPLAYCLEAR);
			}

			ADC_u16StartConversionAsynchronous(0,APP);
    2bce:	29 e9       	ldi	r18, 0x99	; 153
    2bd0:	37 e1       	ldi	r19, 0x17	; 23
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	b9 01       	movw	r22, r18
    2bd6:	0e 94 30 0c 	call	0x1860	; 0x1860 <ADC_u16StartConversionAsynchronous>

			if(temp >=45 && LCD_Flag !=1)
    2bda:	80 91 2d 01 	lds	r24, 0x012D
    2bde:	8d 32       	cpi	r24, 0x2D	; 45
    2be0:	f8 f0       	brcs	.+62     	; 0x2c20 <main+0x2da>
    2be2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	e1 f0       	breq	.+56     	; 0x2c20 <main+0x2da>
			{
				LCD_Flag =1;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	8b af       	std	Y+59, r24	; 0x3b
				HLCD_VoidSendCommand(DISPLAYCLEAR);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
				HLCD_VoidSendString("weather is hot");
    2bf2:	8c e7       	ldi	r24, 0x7C	; 124
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				HLCD_VoidGotoXY(1,0);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	0e 94 81 13 	call	0x2702	; 0x2702 <HLCD_VoidGotoXY>
				HLCD_VoidSendString("Fan is turn on");
    2c02:	8b e8       	ldi	r24, 0x8B	; 139
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_PIN_HIGH);
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	66 e0       	ldi	r22, 0x06	; 6
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_PIN_HIGH);
    2c14:	83 e0       	ldi	r24, 0x03	; 3
    2c16:	65 e0       	ldi	r22, 0x05	; 5
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    2c1e:	d2 cf       	rjmp	.-92     	; 0x2bc4 <main+0x27e>

			}

			else if( (temp <40 && temp > 35) && LCD_Flag !=2)
    2c20:	80 91 2d 01 	lds	r24, 0x012D
    2c24:	88 32       	cpi	r24, 0x28	; 40
    2c26:	18 f5       	brcc	.+70     	; 0x2c6e <main+0x328>
    2c28:	80 91 2d 01 	lds	r24, 0x012D
    2c2c:	84 32       	cpi	r24, 0x24	; 36
    2c2e:	f8 f0       	brcs	.+62     	; 0x2c6e <main+0x328>
    2c30:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c32:	82 30       	cpi	r24, 0x02	; 2
    2c34:	e1 f0       	breq	.+56     	; 0x2c6e <main+0x328>
			{
				LCD_Flag = 2;
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	8b af       	std	Y+59, r24	; 0x3b
				HLCD_VoidSendCommand(DISPLAYCLEAR);
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
				HLCD_VoidSendString("weather is warm");
    2c40:	8a e9       	ldi	r24, 0x9A	; 154
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				HLCD_VoidGotoXY(1,0);
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	0e 94 81 13 	call	0x2702	; 0x2702 <HLCD_VoidGotoXY>
				HLCD_VoidSendString("Fan is turn off");
    2c50:	8a ea       	ldi	r24, 0xAA	; 170
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_PIN_LOW);
    2c58:	83 e0       	ldi	r24, 0x03	; 3
    2c5a:	66 e0       	ldi	r22, 0x06	; 6
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_PIN_HIGH);
    2c62:	83 e0       	ldi	r24, 0x03	; 3
    2c64:	65 e0       	ldi	r22, 0x05	; 5
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    2c6c:	ab cf       	rjmp	.-170    	; 0x2bc4 <main+0x27e>
			}
			else if( temp < 35 && LCD_Flag !=3 )
    2c6e:	80 91 2d 01 	lds	r24, 0x012D
    2c72:	83 32       	cpi	r24, 0x23	; 35
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <main+0x332>
    2c76:	a6 cf       	rjmp	.-180    	; 0x2bc4 <main+0x27e>
    2c78:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c7a:	83 30       	cpi	r24, 0x03	; 3
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <main+0x33a>
    2c7e:	a2 cf       	rjmp	.-188    	; 0x2bc4 <main+0x27e>
			{
				LCD_Flag =3;
    2c80:	83 e0       	ldi	r24, 0x03	; 3
    2c82:	8b af       	std	Y+59, r24	; 0x3b
				HLCD_VoidSendCommand(DISPLAYCLEAR);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>

				HLCD_VoidSendString("weather is cool");
    2c8a:	8a eb       	ldi	r24, 0xBA	; 186
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				HLCD_VoidGotoXY(1,0);
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	0e 94 81 13 	call	0x2702	; 0x2702 <HLCD_VoidGotoXY>
				HLCD_VoidSendString("Fan is turn off");
    2c9a:	8a ea       	ldi	r24, 0xAA	; 170
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_PIN_LOW);
    2ca2:	83 e0       	ldi	r24, 0x03	; 3
    2ca4:	66 e0       	ldi	r22, 0x06	; 6
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_PIN_LOW);
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	65 e0       	ldi	r22, 0x05	; 5
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 c1 09 	call	0x1382	; 0x1382 <DIO_u8SetPinValue>
    2cb6:	86 cf       	rjmp	.-244    	; 0x2bc4 <main+0x27e>


			}

		}
		else if(Password != 123 && number_of_tries <2)
    2cb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cba:	8b 37       	cpi	r24, 0x7B	; 123
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <main+0x37a>
    2cbe:	23 c1       	rjmp	.+582    	; 0x2f06 <main+0x5c0>
    2cc0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2cc2:	82 30       	cpi	r24, 0x02	; 2
    2cc4:	08 f0       	brcs	.+2      	; 0x2cc8 <main+0x382>
    2cc6:	1f c1       	rjmp	.+574    	; 0x2f06 <main+0x5c0>
		{
			HLCD_VoidSendCommand(DISPLAYCLEAR);
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
			HLCD_VoidSendString("Wrong password");
    2cce:	8a ec       	ldi	r24, 0xCA	; 202
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	aa ef       	ldi	r26, 0xFA	; 250
    2cdc:	b3 e4       	ldi	r27, 0x43	; 67
    2cde:	89 8f       	std	Y+25, r24	; 0x19
    2ce0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ce2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a ef       	ldi	r20, 0xFA	; 250
    2cf4:	54 e4       	ldi	r21, 0x44	; 68
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	8d 8b       	std	Y+21, r24	; 0x15
    2d00:	9e 8b       	std	Y+22, r25	; 0x16
    2d02:	af 8b       	std	Y+23, r26	; 0x17
    2d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d06:	6d 89       	ldd	r22, Y+21	; 0x15
    2d08:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	2c f4       	brge	.+10     	; 0x2d28 <main+0x3e2>
		__ticks = 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9c 8b       	std	Y+20, r25	; 0x14
    2d24:	8b 8b       	std	Y+19, r24	; 0x13
    2d26:	3f c0       	rjmp	.+126    	; 0x2da6 <main+0x460>
	else if (__tmp > 65535)
    2d28:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	57 e4       	ldi	r21, 0x47	; 71
    2d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	4c f5       	brge	.+82     	; 0x2d92 <main+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d40:	69 8d       	ldd	r22, Y+25	; 0x19
    2d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9c 8b       	std	Y+20, r25	; 0x14
    2d66:	8b 8b       	std	Y+19, r24	; 0x13
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <main+0x442>
    2d6a:	88 ec       	ldi	r24, 0xC8	; 200
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9a 8b       	std	Y+18, r25	; 0x12
    2d70:	89 8b       	std	Y+17, r24	; 0x11
    2d72:	89 89       	ldd	r24, Y+17	; 0x11
    2d74:	9a 89       	ldd	r25, Y+18	; 0x12
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <main+0x430>
    2d7a:	9a 8b       	std	Y+18, r25	; 0x12
    2d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d80:	9c 89       	ldd	r25, Y+20	; 0x14
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	9c 8b       	std	Y+20, r25	; 0x14
    2d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d88:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <main+0x424>
    2d90:	14 c0       	rjmp	.+40     	; 0x2dba <main+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d92:	6d 89       	ldd	r22, Y+21	; 0x15
    2d94:	7e 89       	ldd	r23, Y+22	; 0x16
    2d96:	8f 89       	ldd	r24, Y+23	; 0x17
    2d98:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9c 8b       	std	Y+20, r25	; 0x14
    2da4:	8b 8b       	std	Y+19, r24	; 0x13
    2da6:	8b 89       	ldd	r24, Y+19	; 0x13
    2da8:	9c 89       	ldd	r25, Y+20	; 0x14
    2daa:	98 8b       	std	Y+16, r25	; 0x10
    2dac:	8f 87       	std	Y+15, r24	; 0x0f
    2dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db0:	98 89       	ldd	r25, Y+16	; 0x10
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <main+0x46c>
    2db6:	98 8b       	std	Y+16, r25	; 0x10
    2db8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			HLCD_VoidSendCommand(DISPLAYCLEAR);
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
			HLCD_VoidSendString("Try again");
    2dc0:	89 ed       	ldi	r24, 0xD9	; 217
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	aa ef       	ldi	r26, 0xFA	; 250
    2dce:	b3 e4       	ldi	r27, 0x43	; 67
    2dd0:	8b 87       	std	Y+11, r24	; 0x0b
    2dd2:	9c 87       	std	Y+12, r25	; 0x0c
    2dd4:	ad 87       	std	Y+13, r26	; 0x0d
    2dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a ef       	ldi	r20, 0xFA	; 250
    2de6:	54 e4       	ldi	r21, 0x44	; 68
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8f 83       	std	Y+7, r24	; 0x07
    2df2:	98 87       	std	Y+8, r25	; 0x08
    2df4:	a9 87       	std	Y+9, r26	; 0x09
    2df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfa:	78 85       	ldd	r23, Y+8	; 0x08
    2dfc:	89 85       	ldd	r24, Y+9	; 0x09
    2dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <main+0x4d4>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <main+0x552>
	else if (__tmp > 65535)
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	4c f5       	brge	.+82     	; 0x2e84 <main+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9e 83       	std	Y+6, r25	; 0x06
    2e58:	8d 83       	std	Y+5, r24	; 0x05
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <main+0x534>
    2e5c:	88 ec       	ldi	r24, 0xC8	; 200
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9c 83       	std	Y+4, r25	; 0x04
    2e62:	8b 83       	std	Y+3, r24	; 0x03
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	9c 81       	ldd	r25, Y+4	; 0x04
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <main+0x522>
    2e6c:	9c 83       	std	Y+4, r25	; 0x04
    2e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	9e 83       	std	Y+6, r25	; 0x06
    2e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <main+0x516>
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <main+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e84:	6f 81       	ldd	r22, Y+7	; 0x07
    2e86:	78 85       	ldd	r23, Y+8	; 0x08
    2e88:	89 85       	ldd	r24, Y+9	; 0x09
    2e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9c:	9a 83       	std	Y+2, r25	; 0x02
    2e9e:	89 83       	std	Y+1, r24	; 0x01
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <main+0x55e>
    2ea8:	9a 83       	std	Y+2, r25	; 0x02
    2eaa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			HLCD_VoidSendCommand(DISPLAYCLEAR);
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
			Password=0;
    2eb2:	1d ae       	std	Y+61, r1	; 0x3d
			Local_u8Key =0;
    2eb4:	1e ae       	std	Y+62, r1	; 0x3e
			Flag_star =0;
    2eb6:	1c ae       	std	Y+60, r1	; 0x3c
    2eb8:	1f c0       	rjmp	.+62     	; 0x2ef8 <main+0x5b2>
			while(Local_u8Key !='=')
			{
				Password = Password*10+Local_u8Key;
    2eba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ebc:	88 2f       	mov	r24, r24
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9c 01       	movw	r18, r24
    2ec2:	22 0f       	add	r18, r18
    2ec4:	33 1f       	adc	r19, r19
    2ec6:	c9 01       	movw	r24, r18
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	82 0f       	add	r24, r18
    2ed2:	93 1f       	adc	r25, r19
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ed8:	89 0f       	add	r24, r25
    2eda:	8d af       	std	Y+61, r24	; 0x3d
				if(Flag_star!=0)
    2edc:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ede:	88 23       	and	r24, r24
    2ee0:	19 f0       	breq	.+6      	; 0x2ee8 <main+0x5a2>
				{
					HLCD_VoidSendChar('*');
    2ee2:	8a e2       	ldi	r24, 0x2A	; 42
    2ee4:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <HLCD_VoidSendChar>
				}
				do
				{
					Local_u8Key=KPD_u8GetPressedKey();
    2ee8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <KPD_u8GetPressedKey>
    2eec:	8e af       	std	Y+62, r24	; 0x3e
					Flag_star=1;
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	8c af       	std	Y+60, r24	; 0x3c
				}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    2ef2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef6:	c1 f3       	breq	.-16     	; 0x2ee8 <main+0x5a2>
			_delay_ms(500);
			HLCD_VoidSendCommand(DISPLAYCLEAR);
			Password=0;
			Local_u8Key =0;
			Flag_star =0;
			while(Local_u8Key !='=')
    2ef8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2efa:	8d 33       	cpi	r24, 0x3D	; 61
    2efc:	f1 f6       	brne	.-68     	; 0x2eba <main+0x574>
					Local_u8Key=KPD_u8GetPressedKey();
					Flag_star=1;
				}while(Local_u8Key==KPD_NO_PRESSED_KEY );

			}
			number_of_tries++;
    2efe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	8a af       	std	Y+58, r24	; 0x3a
    2f04:	5f ce       	rjmp	.-834    	; 0x2bc4 <main+0x27e>

		}
		else
		{
			if(check_flag ==0)
    2f06:	89 ad       	ldd	r24, Y+57	; 0x39
    2f08:	88 23       	and	r24, r24
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <main+0x5c8>
    2f0c:	5b ce       	rjmp	.-842    	; 0x2bc4 <main+0x27e>
			{
				HLCD_VoidSendCommand(DISPLAYCLEAR);
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <HLCD_VoidSendCommand>
				HLCD_VoidSendString("exceed ");
    2f14:	83 ee       	ldi	r24, 0xE3	; 227
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				HLCD_VoidGotoXY(1,0);
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	0e 94 81 13 	call	0x2702	; 0x2702 <HLCD_VoidGotoXY>
				HLCD_VoidSendString("valid tries");
    2f24:	8b ee       	ldi	r24, 0xEB	; 235
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <HLCD_VoidSendString>
				check_flag =1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	89 af       	std	Y+57, r24	; 0x39
    2f30:	49 ce       	rjmp	.-878    	; 0x2bc4 <main+0x27e>

00002f32 <APP>:
			}
		}
	}
}
void APP(void)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidGotoXY(0,0);
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	0e 94 81 13 	call	0x2702	; 0x2702 <HLCD_VoidGotoXY>
	volt =ADC_GetVolt();
    2f42:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <ADC_GetVolt>
    2f46:	90 93 2f 01 	sts	0x012F, r25
    2f4a:	80 93 2e 01 	sts	0x012E, r24
	temp = volt /10;
    2f4e:	80 91 2e 01 	lds	r24, 0x012E
    2f52:	90 91 2f 01 	lds	r25, 0x012F
    2f56:	2a e0       	ldi	r18, 0x0A	; 10
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	b9 01       	movw	r22, r18
    2f5c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__udivmodhi4>
    2f60:	cb 01       	movw	r24, r22
    2f62:	80 93 2d 01 	sts	0x012D, r24
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <__mulsi3>:
    2f6c:	62 9f       	mul	r22, r18
    2f6e:	d0 01       	movw	r26, r0
    2f70:	73 9f       	mul	r23, r19
    2f72:	f0 01       	movw	r30, r0
    2f74:	82 9f       	mul	r24, r18
    2f76:	e0 0d       	add	r30, r0
    2f78:	f1 1d       	adc	r31, r1
    2f7a:	64 9f       	mul	r22, r20
    2f7c:	e0 0d       	add	r30, r0
    2f7e:	f1 1d       	adc	r31, r1
    2f80:	92 9f       	mul	r25, r18
    2f82:	f0 0d       	add	r31, r0
    2f84:	83 9f       	mul	r24, r19
    2f86:	f0 0d       	add	r31, r0
    2f88:	74 9f       	mul	r23, r20
    2f8a:	f0 0d       	add	r31, r0
    2f8c:	65 9f       	mul	r22, r21
    2f8e:	f0 0d       	add	r31, r0
    2f90:	99 27       	eor	r25, r25
    2f92:	72 9f       	mul	r23, r18
    2f94:	b0 0d       	add	r27, r0
    2f96:	e1 1d       	adc	r30, r1
    2f98:	f9 1f       	adc	r31, r25
    2f9a:	63 9f       	mul	r22, r19
    2f9c:	b0 0d       	add	r27, r0
    2f9e:	e1 1d       	adc	r30, r1
    2fa0:	f9 1f       	adc	r31, r25
    2fa2:	bd 01       	movw	r22, r26
    2fa4:	cf 01       	movw	r24, r30
    2fa6:	11 24       	eor	r1, r1
    2fa8:	08 95       	ret

00002faa <__udivmodhi4>:
    2faa:	aa 1b       	sub	r26, r26
    2fac:	bb 1b       	sub	r27, r27
    2fae:	51 e1       	ldi	r21, 0x11	; 17
    2fb0:	07 c0       	rjmp	.+14     	; 0x2fc0 <__udivmodhi4_ep>

00002fb2 <__udivmodhi4_loop>:
    2fb2:	aa 1f       	adc	r26, r26
    2fb4:	bb 1f       	adc	r27, r27
    2fb6:	a6 17       	cp	r26, r22
    2fb8:	b7 07       	cpc	r27, r23
    2fba:	10 f0       	brcs	.+4      	; 0x2fc0 <__udivmodhi4_ep>
    2fbc:	a6 1b       	sub	r26, r22
    2fbe:	b7 0b       	sbc	r27, r23

00002fc0 <__udivmodhi4_ep>:
    2fc0:	88 1f       	adc	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	5a 95       	dec	r21
    2fc6:	a9 f7       	brne	.-22     	; 0x2fb2 <__udivmodhi4_loop>
    2fc8:	80 95       	com	r24
    2fca:	90 95       	com	r25
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	08 95       	ret

00002fd2 <__prologue_saves__>:
    2fd2:	2f 92       	push	r2
    2fd4:	3f 92       	push	r3
    2fd6:	4f 92       	push	r4
    2fd8:	5f 92       	push	r5
    2fda:	6f 92       	push	r6
    2fdc:	7f 92       	push	r7
    2fde:	8f 92       	push	r8
    2fe0:	9f 92       	push	r9
    2fe2:	af 92       	push	r10
    2fe4:	bf 92       	push	r11
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	ca 1b       	sub	r28, r26
    2ffc:	db 0b       	sbc	r29, r27
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	09 94       	ijmp

0000300a <__epilogue_restores__>:
    300a:	2a 88       	ldd	r2, Y+18	; 0x12
    300c:	39 88       	ldd	r3, Y+17	; 0x11
    300e:	48 88       	ldd	r4, Y+16	; 0x10
    3010:	5f 84       	ldd	r5, Y+15	; 0x0f
    3012:	6e 84       	ldd	r6, Y+14	; 0x0e
    3014:	7d 84       	ldd	r7, Y+13	; 0x0d
    3016:	8c 84       	ldd	r8, Y+12	; 0x0c
    3018:	9b 84       	ldd	r9, Y+11	; 0x0b
    301a:	aa 84       	ldd	r10, Y+10	; 0x0a
    301c:	b9 84       	ldd	r11, Y+9	; 0x09
    301e:	c8 84       	ldd	r12, Y+8	; 0x08
    3020:	df 80       	ldd	r13, Y+7	; 0x07
    3022:	ee 80       	ldd	r14, Y+6	; 0x06
    3024:	fd 80       	ldd	r15, Y+5	; 0x05
    3026:	0c 81       	ldd	r16, Y+4	; 0x04
    3028:	1b 81       	ldd	r17, Y+3	; 0x03
    302a:	aa 81       	ldd	r26, Y+2	; 0x02
    302c:	b9 81       	ldd	r27, Y+1	; 0x01
    302e:	ce 0f       	add	r28, r30
    3030:	d1 1d       	adc	r29, r1
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	ed 01       	movw	r28, r26
    303e:	08 95       	ret

00003040 <_exit>:
    3040:	f8 94       	cli

00003042 <__stop_program>:
    3042:	ff cf       	rjmp	.-2      	; 0x3042 <__stop_program>
